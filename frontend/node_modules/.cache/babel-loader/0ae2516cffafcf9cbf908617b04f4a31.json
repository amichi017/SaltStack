{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_FAIL, REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADING, USER_LOADED } from './types'; // Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('api/auth/user', tokenConfig).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const register = ({\n  first_name,\n  last_name,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password\n  });\n  axios.post('\"http://127.0.0.1:5000/register\"', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password\n  });\n  axios.post('\"http://127.0.0.1:5000/login\"', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/actions/authActions.js"],"names":["axios","returnErrors","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADING","USER_LOADED","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","first_name","last_name","email","password","config","headers","body","JSON","stringify","post","login","token","auth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SACAC,UADA,EAEAC,aAFA,EAGAC,UAHA,EAIAC,WAJA,EAKAC,gBALA,EAMAC,aANA,EAOAC,YAPA,EAQAC,WARA,QASO,SATP,C,CAWA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AAEAR,EAAAA,KAAK,CAACc,GAAN,CAAU,eAAV,EAA2BC,WAA3B,EACKC,IADL,CACWC,GAAG,IAAIN,QAAQ,CAAC;AACnBE,IAAAA,IAAI,EAACJ,WADc;AAEnBS,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFM,GAAD,CAD1B,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAGH,GAVL;AAWH,CAfM;AAiBP,OAAO,MAAMsB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA,KAAzB;AAAgCC,EAAAA;AAAhC,CAAD,KAAgDjB,QAAQ,IAAI;AAChF;AACA,QAAMkB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CAFgF,CAQhF;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACR,IAAAA,UAAD;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,KAAxB;AAA+BC,IAAAA;AAA/B,GAAf,CAAb;AAEA5B,EAAAA,KAAK,CAACkC,IAAN,CAAW,kCAAX,EAA+CH,IAA/C,EAAqDF,MAArD,EACCb,IADD,CACMC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEP,gBADY;AAElBY,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADrB,EAKCC,KALD,CAKOC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEN;AADD,KAAD,CAAR;AAGH,GAVD;AAWH,CAtBM;AAwBP,OAAO,MAAM4B,KAAK,GAAG,CAAC;AAAER,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyBjB,QAAQ,IAAI;AACtD;AACA,QAAMkB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CAFsD,CAQtD;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACR,IAAAA,UAAD;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,KAAxB;AAA+BC,IAAAA;AAA/B,GAAf,CAAb;AAEA5B,EAAAA,KAAK,CAACkC,IAAN,CAAW,+BAAX,EAA4CH,IAA5C,EAAkDF,MAAlD,EACCb,IADD,CACMC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEV,aADY;AAElBe,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADrB,EAKCC,KALD,CAKOC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,YAAzC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH,GAVD;AAWH,CAtBM,C,CAwBP;;AACA,OAAO,MAAMW,WAAW,GAAGH,QAAQ,IAAI;AAChC;AACA,QAAMwB,KAAK,GAAGxB,QAAQ,GAAGyB,IAAX,CAAgBD,KAA9B,CAFgC,CAIhC;;AACA,QAAMP,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CALgC,CAWhC;;AACA,MAAGM,KAAH,EAAU;AACNP,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCM,KAAjC;AACH;;AAEJ,SAAOP,MAAP;AACH,CAjBM","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\n\nimport {\nAUTH_ERROR,\nLOGIN_SUCCESS,\nLOGIN_FAIL,\nLOGOUT_FAIL,\nREGISTER_SUCCESS,\nREGISTER_FAIL,\nUSER_LOADING,\nUSER_LOADED\n} from './types';\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: USER_LOADING});\n\n    axios.get('api/auth/user', tokenConfig)\n        .then( res => dispatch({\n            type:USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        })\n}\n\nexport const register = ({ first_name, last_name, email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    // Request body\n    const body = JSON.stringify({first_name, last_name, email, password });\n\n    axios.post('\"http://127.0.0.1:5000/register\"', body, config)\n    .then(res => dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n    }))\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    })\n}\n\nexport const login = ({ email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    // Request body\n    const body = JSON.stringify({first_name, last_name, email, password });\n\n    axios.post('\"http://127.0.0.1:5000/login\"', body, config)\n    .then(res => dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n    }))\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    })\n}\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n       // Get token from localstorage\n       const token = getState().auth.token;\n\n       // Headers\n       const config = {\n           headers: {\n               \"Content-type\": \"application/json\"\n           }\n       }\n   \n       // If token, add to headers\n       if(token) {\n           config.headers['x-auth-token'] = token;\n       }\n\n    return config;\n}"]},"metadata":{},"sourceType":"module"}