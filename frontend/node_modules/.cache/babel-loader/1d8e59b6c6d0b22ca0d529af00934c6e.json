{"ast":null,"code":"import React from 'react';\nexport function isMuiElement(element, muiNames) {\n  return React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;\n} // TODO: Make it private only in v5\n\nexport function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\nexport function useForkRef(refA, refB) {\n  /**\r\n   * This will create a new function if the ref props change and are defined.\r\n   * This means react will call the old forkRef with `null` and the new forkRef\r\n   * with the ref. Cleanup naturally emerges from this behavior\r\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}","map":{"version":3,"sources":["C:/react/SaltStack/frontend/node_modules/@material-ui/core/esm/utils/reactHelpers.js"],"names":["React","isMuiElement","element","muiNames","isValidElement","indexOf","type","muiName","setRef","ref","value","current","useForkRef","refA","refB","useMemo","refValue"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,QAA/B,EAAyC;AAC9C,SAAOH,KAAK,CAACI,cAAN,CAAqBF,OAArB,KAAiCC,QAAQ,CAACE,OAAT,CAAiBH,OAAO,CAACI,IAAR,CAAaC,OAA9B,MAA2C,CAAC,CAApF;AACD,C,CAAC;;AAEF,OAAO,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;AACjC,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACD,GAFD,MAEO,IAAID,GAAJ,EAAS;AACdA,IAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACD;AACF;AACD,OAAO,SAASE,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AACrC;;;;;AAKA,SAAOd,KAAK,CAACe,OAAN,CAAc,YAAY;AAC/B,QAAIF,IAAI,IAAI,IAAR,IAAgBC,IAAI,IAAI,IAA5B,EAAkC;AAChC,aAAO,IAAP;AACD;;AAED,WAAO,UAAUE,QAAV,EAAoB;AACzBR,MAAAA,MAAM,CAACK,IAAD,EAAOG,QAAP,CAAN;AACAR,MAAAA,MAAM,CAACM,IAAD,EAAOE,QAAP,CAAN;AACD,KAHD;AAID,GATM,EASJ,CAACH,IAAD,EAAOC,IAAP,CATI,CAAP;AAUD","sourcesContent":["import React from 'react';\r\nexport function isMuiElement(element, muiNames) {\r\n  return React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;\r\n} // TODO: Make it private only in v5\r\n\r\nexport function setRef(ref, value) {\r\n  if (typeof ref === 'function') {\r\n    ref(value);\r\n  } else if (ref) {\r\n    ref.current = value;\r\n  }\r\n}\r\nexport function useForkRef(refA, refB) {\r\n  /**\r\n   * This will create a new function if the ref props change and are defined.\r\n   * This means react will call the old forkRef with `null` and the new forkRef\r\n   * with the ref. Cleanup naturally emerges from this behavior\r\n   */\r\n  return React.useMemo(function () {\r\n    if (refA == null && refB == null) {\r\n      return null;\r\n    }\r\n\r\n    return function (refValue) {\r\n      setRef(refA, refValue);\r\n      setRef(refB, refValue);\r\n    };\r\n  }, [refA, refB]);\r\n}"]},"metadata":{},"sourceType":"module"}