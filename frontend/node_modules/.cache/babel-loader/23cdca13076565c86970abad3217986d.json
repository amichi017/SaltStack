{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport formControlState from '../FormControl/formControlState';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nimport withStyles from '../styles/withStyles';\nimport { useForkRef } from '../utils/reactHelpers';\nimport TextareaAutosize from '../TextareaAutosize';\nimport { isFilled } from './utils';\nexport var styles = function styles(theme) {\n  var light = theme.palette.type === 'light';\n  var placeholder = {\n    color: 'currentColor',\n    opacity: light ? 0.42 : 0.5,\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.shorter\n    })\n  };\n  var placeholderHidden = {\n    opacity: '0 !important'\n  };\n  var placeholderVisible = {\n    opacity: light ? 0.42 : 0.5\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      // Mimics the default input display property used by browsers for an input.\n      fontFamily: theme.typography.fontFamily,\n      color: theme.palette.text.primary,\n      fontSize: theme.typography.pxToRem(16),\n      lineHeight: '1.1875em',\n      // Reset (19px), match the native input line-height\n      boxSizing: 'border-box',\n      // Prevent padding issue with fullWidth.\n      position: 'relative',\n      cursor: 'text',\n      display: 'inline-flex',\n      alignItems: 'center',\n      '&$disabled': {\n        color: theme.palette.text.disabled,\n        cursor: 'default'\n      }\n    },\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {},\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {},\n\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {},\n\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\n      '&$marginDense': {\n        paddingTop: 4 - 1\n      }\n    },\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the `input` element. */\n    input: {\n      font: 'inherit',\n      color: 'currentColor',\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\n      border: 0,\n      boxSizing: 'content-box',\n      background: 'none',\n      height: '1.1875em',\n      // Reset (19px), match the native input line-height\n      margin: 0,\n      // Reset for Safari\n      // Remove grey highlight\n      WebkitTapHighlightColor: 'transparent',\n      display: 'block',\n      // Make the flex item shrink with Firefox\n      minWidth: 0,\n      width: '100%',\n      // Fix IE 11 width issue\n      '&::-webkit-input-placeholder': placeholder,\n      '&::-moz-placeholder': placeholder,\n      // Firefox 19+\n      '&:-ms-input-placeholder': placeholder,\n      // IE 11\n      '&::-ms-input-placeholder': placeholder,\n      // Edge\n      '&:focus': {\n        outline: 0\n      },\n      // Reset Firefox invalid required input style\n      '&:invalid': {\n        boxShadow: 'none'\n      },\n      '&::-webkit-search-decoration': {\n        // Remove the padding when type=search.\n        '-webkit-appearance': 'none'\n      },\n      // Show and hide the placeholder logic\n      'label[data-shrink=false] + $formControl &': {\n        '&::-webkit-input-placeholder': placeholderHidden,\n        '&::-moz-placeholder': placeholderHidden,\n        // Firefox 19+\n        '&:-ms-input-placeholder': placeholderHidden,\n        // IE 11\n        '&::-ms-input-placeholder': placeholderHidden,\n        // Edge\n        '&:focus::-webkit-input-placeholder': placeholderVisible,\n        '&:focus::-moz-placeholder': placeholderVisible,\n        // Firefox 19+\n        '&:focus:-ms-input-placeholder': placeholderVisible,\n        // IE 11\n        '&:focus::-ms-input-placeholder': placeholderVisible // Edge\n\n      },\n      '&$disabled': {\n        opacity: 1 // Reset iOS opacity\n\n      },\n      '&:-webkit-autofill': {\n        animationDuration: '5000s',\n        animationName: '$auto-fill'\n      }\n    },\n    '@keyframes auto-fill': {\n      from: {}\n    },\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 4 - 1\n    },\n\n    /* Styles applied to the `input` element if `select={true}`. */\n    inputSelect: {\n      paddingRight: 24\n    },\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      height: 'auto',\n      resize: 'none',\n      padding: 0\n    },\n\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {\n      // Improve type search style.\n      '-moz-appearance': 'textfield',\n      '-webkit-appearance': 'textfield'\n    },\n\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {},\n\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {},\n\n    /* Styles applied to the `input` element if `hiddenLabel={true}`. */\n    inputHiddenLabel: {}\n  };\n};\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\r\n * `InputBase` contains as few styles as possible.\r\n * It aims to be a simple building block for creating an input.\r\n * It contains a load of style reset and some state logic.\r\n */\n\nvar InputBase = React.forwardRef(function InputBase(props, ref) {\n  var ariaDescribedby = props['aria-describedby'],\n      autoComplete = props.autoComplete,\n      autoFocus = props.autoFocus,\n      classes = props.classes,\n      classNameProp = props.className,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      endAdornment = props.endAdornment,\n      error = props.error,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      id = props.id,\n      _props$inputComponent = props.inputComponent,\n      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,\n      _props$inputProps = props.inputProps;\n  _props$inputProps = _props$inputProps === void 0 ? {} : _props$inputProps;\n\n  var inputPropsClassName = _props$inputProps.className,\n      inputPropsProp = _objectWithoutProperties(_props$inputProps, [\"className\"]),\n      inputRefProp = props.inputRef,\n      margin = props.margin,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      onFocus = props.onFocus,\n      onKeyDown = props.onKeyDown,\n      onKeyUp = props.onKeyUp,\n      placeholder = props.placeholder,\n      readOnly = props.readOnly,\n      renderSuffix = props.renderSuffix,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      startAdornment = props.startAdornment,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'text' : _props$type,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"aria-describedby\", \"autoComplete\", \"autoFocus\", \"classes\", \"className\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"fullWidth\", \"id\", \"inputComponent\", \"inputProps\", \"inputRef\", \"margin\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onClick\", \"onFocus\", \"onKeyDown\", \"onKeyUp\", \"placeholder\", \"readOnly\", \"renderSuffix\", \"rows\", \"rowsMax\", \"select\", \"startAdornment\", \"type\", \"value\"]);\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef();\n  var handleInputRefWarning = React.useCallback(function (instance) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (instance && !(instance instanceof HTMLInputElement) && !instance.focus) {\n        console.error(['Material-UI: you have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` prop.', 'Make sure the `inputRef` prop is called with a HTMLInputElement.'].join('\\n'));\n      }\n    }\n  }, []);\n  var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);\n  var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);\n  var handleInputRef = useForkRef(inputRef, handleInputRefProp);\n\n  var _React$useState = React.useState(false),\n      focused = _React$useState[0],\n      setFocused = _React$useState[1];\n\n  var muiFormControl = useFormControl();\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (muiFormControl) {\n        return muiFormControl.registerEffect();\n      }\n\n      return undefined;\n    }, [muiFormControl]);\n  }\n\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled']\n  });\n  fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.\n  // We need to book keep the focused state manually.\n\n  React.useEffect(function () {\n    if (!muiFormControl && disabled && focused) {\n      setFocused(false);\n\n      if (onBlur) {\n        onBlur();\n      }\n    }\n  }, [muiFormControl, disabled, focused, onBlur]);\n  var onFilled = muiFormControl && muiFormControl.onFilled;\n  var onEmpty = muiFormControl && muiFormControl.onEmpty;\n  var checkDirty = React.useCallback(function (obj) {\n    if (isFilled(obj)) {\n      if (onFilled) {\n        onFilled();\n      }\n    } else if (onEmpty) {\n      onEmpty();\n    }\n  }, [onFilled, onEmpty]);\n  useEnhancedEffect(function () {\n    if (isControlled) {\n      checkDirty({\n        value: value\n      });\n    }\n  }, [value, checkDirty, isControlled]);\n\n  var handleFocus = function handleFocus(event) {\n    // Fix a bug with IE 11 where the focus/blur events are triggered\n    // while the input is disabled.\n    if (fcs.disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    } else {\n      setFocused(true);\n    }\n  };\n\n  var handleBlur = function handleBlur(event) {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    } else {\n      setFocused(false);\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      var element = event.target || inputRef.current;\n\n      if (element == null) {\n        throw new TypeError('Material-UI: Expected valid input target. ' + 'Did you use a custom `inputComponent` and forget to forward refs? ' + 'See https://material-ui.com/r/input-component-ref-interface for more info.');\n      }\n\n      checkDirty({\n        value: element.value\n      });\n    } // Perform in the willUpdate\n\n\n    if (onChange) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      onChange.apply(void 0, [event].concat(args));\n    }\n  }; // Check the input state on mount, in case it was filled by the user\n  // or auto filled by the browser before the hydration (for SSR).\n\n\n  React.useEffect(function () {\n    checkDirty(inputRef.current);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleClick = function handleClick(event) {\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  var InputComponent = inputComponent;\n\n  var inputProps = _extends({}, inputPropsProp, {\n    ref: handleInputRef\n  });\n\n  if (typeof InputComponent !== 'string') {\n    inputProps = _extends({\n      // Rename ref to inputRef as we don't know the\n      // provided `inputComponent` structure.\n      inputRef: handleInputRef,\n      type: type\n    }, inputProps, {\n      ref: null\n    });\n  } else if (multiline) {\n    if (rows && !rowsMax) {\n      InputComponent = 'textarea';\n    } else {\n      inputProps = _extends({\n        rows: rows,\n        rowsMax: rowsMax\n      }, inputProps);\n      InputComponent = TextareaAutosize;\n    }\n  } else {\n    inputProps = _extends({\n      type: type\n    }, inputProps);\n  }\n\n  var handleAutoFill = function handleAutoFill() {\n    // Provide a fake value as Chrome might not let you access it for security reasons.\n    checkDirty({\n      value: 'x'\n    });\n  };\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, classNameProp, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, {\n      dense: classes.marginDense\n    }[fcs.margin]),\n    onClick: handleClick,\n    ref: ref\n  }, other), startAdornment, React.createElement(FormControlContext.Provider, {\n    value: null\n  }, React.createElement(InputComponent, _extends({\n    \"aria-invalid\": fcs.error,\n    \"aria-describedby\": ariaDescribedby,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    className: clsx(classes.input, inputPropsClassName, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, select && classes.inputSelect, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, {\n      search: classes.inputTypeSearch\n    }[type], {\n      dense: classes.inputMarginDense\n    }[fcs.margin]),\n    defaultValue: defaultValue,\n    disabled: fcs.disabled,\n    id: id,\n    onAnimationStart: handleAutoFill,\n    name: name,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    placeholder: placeholder,\n    readOnly: readOnly,\n    required: fcs.required,\n    rows: rows,\n    value: value\n  }, inputProps))), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {\n    startAdornment: startAdornment\n  })) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? InputBase.propTypes = {\n  /**\r\n   * @ignore\r\n   */\n  'aria-describedby': PropTypes.string,\n\n  /**\r\n   * This prop helps users to fill forms faster, especially on mobile devices.\r\n   * The name can be confusing, as it's more like an autofill.\r\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\r\n   */\n  autoComplete: PropTypes.string,\n\n  /**\r\n   * If `true`, the `input` element will be focused during the first mount.\r\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\r\n   * The CSS class name of the wrapper element.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The default `input` element value. Use when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.any,\n\n  /**\r\n   * If `true`, the `input` element will be disabled.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * End `InputAdornment` for this component.\r\n   */\n  endAdornment: PropTypes.node,\n\n  /**\r\n   * If `true`, the input will indicate an error. This is normally obtained via context from\r\n   * FormControl.\r\n   */\n  error: PropTypes.bool,\n\n  /**\r\n   * If `true`, the input will take up the full width of its container.\r\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\r\n   * The id of the `input` element.\r\n   */\n  id: PropTypes.string,\n\n  /**\r\n   * The component used for the `input` element.\r\n   * Either a string to use a DOM element or a component.\r\n   */\n  inputComponent: PropTypes.elementType,\n\n  /**\r\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\r\n   */\n  inputProps: PropTypes.object,\n\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\n  inputRef: refType,\n\n  /**\r\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\r\n   * FormControl.\r\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n\n  /**\r\n   * If `true`, a textarea element will be rendered.\r\n   */\n  multiline: PropTypes.bool,\n\n  /**\r\n   * Name attribute of the `input` element.\r\n   */\n  name: PropTypes.string,\n\n  /**\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value` (string).\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onClick: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\r\n   * The short hint displayed in the input before the user enters a value.\r\n   */\n  placeholder: PropTypes.string,\n\n  /**\r\n   * It prevents the user from changing the value of the field\r\n   * (not from interacting with the field).\r\n   */\n  readOnly: PropTypes.bool,\n\n  /**\r\n   * @ignore\r\n   */\n  renderSuffix: PropTypes.func,\n\n  /**\r\n   * If `true`, the `input` element will be required.\r\n   */\n  required: PropTypes.bool,\n\n  /**\r\n   * Number of rows to display when multiline option is set to true.\r\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\r\n   * Maximum number of rows to display when multiline option is set to true.\r\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\r\n   * Should be `true` when the component hosts a select.\r\n   */\n  select: PropTypes.bool,\n\n  /**\r\n   * Start `InputAdornment` for this component.\r\n   */\n  startAdornment: PropTypes.node,\n\n  /**\r\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\r\n   */\n  type: PropTypes.string,\n\n  /**\r\n   * The value of the `input` element, required for a controlled component.\r\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputBase'\n})(InputBase);","map":{"version":3,"sources":["C:/react/SaltStack/frontend/node_modules/@material-ui/core/esm/InputBase/InputBase.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","refType","formControlState","FormControlContext","useFormControl","withStyles","useForkRef","TextareaAutosize","isFilled","styles","theme","light","palette","type","placeholder","color","opacity","transition","transitions","create","duration","shorter","placeholderHidden","placeholderVisible","root","fontFamily","typography","text","primary","fontSize","pxToRem","lineHeight","boxSizing","position","cursor","display","alignItems","disabled","formControl","focused","adornedStart","adornedEnd","error","marginDense","multiline","padding","concat","paddingTop","fullWidth","width","input","font","border","background","height","margin","WebkitTapHighlightColor","minWidth","outline","boxShadow","animationDuration","animationName","from","inputMarginDense","inputSelect","paddingRight","inputMultiline","resize","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel","useEnhancedEffect","window","useEffect","useLayoutEffect","InputBase","forwardRef","props","ref","ariaDescribedby","autoComplete","autoFocus","classes","classNameProp","className","defaultValue","endAdornment","_props$fullWidth","id","_props$inputComponent","inputComponent","_props$inputProps","inputProps","inputPropsClassName","inputPropsProp","inputRefProp","inputRef","_props$multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","readOnly","renderSuffix","rows","rowsMax","_props$select","select","startAdornment","_props$type","value","other","_React$useRef","useRef","isControlled","current","handleInputRefWarning","useCallback","instance","process","env","NODE_ENV","HTMLInputElement","focus","console","join","handleInputPropsRefProp","handleInputRefProp","handleInputRef","_React$useState","useState","setFocused","muiFormControl","registerEffect","undefined","fcs","states","onFilled","onEmpty","checkDirty","obj","handleFocus","event","stopPropagation","handleBlur","handleChange","element","target","TypeError","_len","arguments","length","args","Array","_key","apply","handleClick","currentTarget","InputComponent","handleAutoFill","createElement","dense","Provider","hiddenLabel","search","onAnimationStart","required","propTypes","string","bool","object","isRequired","any","node","elementType","oneOf","func","oneOfType","number"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\r\n\r\n/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { refType } from '@material-ui/utils';\r\nimport formControlState from '../FormControl/formControlState';\r\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\r\nimport withStyles from '../styles/withStyles';\r\nimport { useForkRef } from '../utils/reactHelpers';\r\nimport TextareaAutosize from '../TextareaAutosize';\r\nimport { isFilled } from './utils';\r\nexport var styles = function styles(theme) {\r\n  var light = theme.palette.type === 'light';\r\n  var placeholder = {\r\n    color: 'currentColor',\r\n    opacity: light ? 0.42 : 0.5,\r\n    transition: theme.transitions.create('opacity', {\r\n      duration: theme.transitions.duration.shorter\r\n    })\r\n  };\r\n  var placeholderHidden = {\r\n    opacity: '0 !important'\r\n  };\r\n  var placeholderVisible = {\r\n    opacity: light ? 0.42 : 0.5\r\n  };\r\n  return {\r\n    /* Styles applied to the root element. */\r\n    root: {\r\n      // Mimics the default input display property used by browsers for an input.\r\n      fontFamily: theme.typography.fontFamily,\r\n      color: theme.palette.text.primary,\r\n      fontSize: theme.typography.pxToRem(16),\r\n      lineHeight: '1.1875em',\r\n      // Reset (19px), match the native input line-height\r\n      boxSizing: 'border-box',\r\n      // Prevent padding issue with fullWidth.\r\n      position: 'relative',\r\n      cursor: 'text',\r\n      display: 'inline-flex',\r\n      alignItems: 'center',\r\n      '&$disabled': {\r\n        color: theme.palette.text.disabled,\r\n        cursor: 'default'\r\n      }\r\n    },\r\n\r\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\r\n    formControl: {},\r\n\r\n    /* Styles applied to the root element if the component is focused. */\r\n    focused: {},\r\n\r\n    /* Styles applied to the root element if `disabled={true}`. */\r\n    disabled: {},\r\n\r\n    /* Styles applied to the root element if `startAdornment` is provided. */\r\n    adornedStart: {},\r\n\r\n    /* Styles applied to the root element if `endAdornment` is provided. */\r\n    adornedEnd: {},\r\n\r\n    /* Styles applied to the root element if `error={true}`. */\r\n    error: {},\r\n\r\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\r\n    marginDense: {},\r\n\r\n    /* Styles applied to the root element if `multiline={true}`. */\r\n    multiline: {\r\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\r\n      '&$marginDense': {\r\n        paddingTop: 4 - 1\r\n      }\r\n    },\r\n\r\n    /* Styles applied to the root element if `fullWidth={true}`. */\r\n    fullWidth: {\r\n      width: '100%'\r\n    },\r\n\r\n    /* Styles applied to the `input` element. */\r\n    input: {\r\n      font: 'inherit',\r\n      color: 'currentColor',\r\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\r\n      border: 0,\r\n      boxSizing: 'content-box',\r\n      background: 'none',\r\n      height: '1.1875em',\r\n      // Reset (19px), match the native input line-height\r\n      margin: 0,\r\n      // Reset for Safari\r\n      // Remove grey highlight\r\n      WebkitTapHighlightColor: 'transparent',\r\n      display: 'block',\r\n      // Make the flex item shrink with Firefox\r\n      minWidth: 0,\r\n      width: '100%',\r\n      // Fix IE 11 width issue\r\n      '&::-webkit-input-placeholder': placeholder,\r\n      '&::-moz-placeholder': placeholder,\r\n      // Firefox 19+\r\n      '&:-ms-input-placeholder': placeholder,\r\n      // IE 11\r\n      '&::-ms-input-placeholder': placeholder,\r\n      // Edge\r\n      '&:focus': {\r\n        outline: 0\r\n      },\r\n      // Reset Firefox invalid required input style\r\n      '&:invalid': {\r\n        boxShadow: 'none'\r\n      },\r\n      '&::-webkit-search-decoration': {\r\n        // Remove the padding when type=search.\r\n        '-webkit-appearance': 'none'\r\n      },\r\n      // Show and hide the placeholder logic\r\n      'label[data-shrink=false] + $formControl &': {\r\n        '&::-webkit-input-placeholder': placeholderHidden,\r\n        '&::-moz-placeholder': placeholderHidden,\r\n        // Firefox 19+\r\n        '&:-ms-input-placeholder': placeholderHidden,\r\n        // IE 11\r\n        '&::-ms-input-placeholder': placeholderHidden,\r\n        // Edge\r\n        '&:focus::-webkit-input-placeholder': placeholderVisible,\r\n        '&:focus::-moz-placeholder': placeholderVisible,\r\n        // Firefox 19+\r\n        '&:focus:-ms-input-placeholder': placeholderVisible,\r\n        // IE 11\r\n        '&:focus::-ms-input-placeholder': placeholderVisible // Edge\r\n\r\n      },\r\n      '&$disabled': {\r\n        opacity: 1 // Reset iOS opacity\r\n\r\n      },\r\n      '&:-webkit-autofill': {\r\n        animationDuration: '5000s',\r\n        animationName: '$auto-fill'\r\n      }\r\n    },\r\n    '@keyframes auto-fill': {\r\n      from: {}\r\n    },\r\n\r\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\r\n    inputMarginDense: {\r\n      paddingTop: 4 - 1\r\n    },\r\n\r\n    /* Styles applied to the `input` element if `select={true}`. */\r\n    inputSelect: {\r\n      paddingRight: 24\r\n    },\r\n\r\n    /* Styles applied to the `input` element if `multiline={true}`. */\r\n    inputMultiline: {\r\n      height: 'auto',\r\n      resize: 'none',\r\n      padding: 0\r\n    },\r\n\r\n    /* Styles applied to the `input` element if `type=\"search\"`. */\r\n    inputTypeSearch: {\r\n      // Improve type search style.\r\n      '-moz-appearance': 'textfield',\r\n      '-webkit-appearance': 'textfield'\r\n    },\r\n\r\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\r\n    inputAdornedStart: {},\r\n\r\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\r\n    inputAdornedEnd: {},\r\n\r\n    /* Styles applied to the `input` element if `hiddenLabel={true}`. */\r\n    inputHiddenLabel: {}\r\n  };\r\n};\r\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\r\n/**\r\n * `InputBase` contains as few styles as possible.\r\n * It aims to be a simple building block for creating an input.\r\n * It contains a load of style reset and some state logic.\r\n */\r\n\r\nvar InputBase = React.forwardRef(function InputBase(props, ref) {\r\n  var ariaDescribedby = props['aria-describedby'],\r\n      autoComplete = props.autoComplete,\r\n      autoFocus = props.autoFocus,\r\n      classes = props.classes,\r\n      classNameProp = props.className,\r\n      defaultValue = props.defaultValue,\r\n      disabled = props.disabled,\r\n      endAdornment = props.endAdornment,\r\n      error = props.error,\r\n      _props$fullWidth = props.fullWidth,\r\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\r\n      id = props.id,\r\n      _props$inputComponent = props.inputComponent,\r\n      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,\r\n      _props$inputProps = props.inputProps;\r\n  _props$inputProps = _props$inputProps === void 0 ? {} : _props$inputProps;\r\n\r\n  var inputPropsClassName = _props$inputProps.className,\r\n      inputPropsProp = _objectWithoutProperties(_props$inputProps, [\"className\"]),\r\n      inputRefProp = props.inputRef,\r\n      margin = props.margin,\r\n      _props$multiline = props.multiline,\r\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\r\n      name = props.name,\r\n      onBlur = props.onBlur,\r\n      onChange = props.onChange,\r\n      onClick = props.onClick,\r\n      onFocus = props.onFocus,\r\n      onKeyDown = props.onKeyDown,\r\n      onKeyUp = props.onKeyUp,\r\n      placeholder = props.placeholder,\r\n      readOnly = props.readOnly,\r\n      renderSuffix = props.renderSuffix,\r\n      rows = props.rows,\r\n      rowsMax = props.rowsMax,\r\n      _props$select = props.select,\r\n      select = _props$select === void 0 ? false : _props$select,\r\n      startAdornment = props.startAdornment,\r\n      _props$type = props.type,\r\n      type = _props$type === void 0 ? 'text' : _props$type,\r\n      value = props.value,\r\n      other = _objectWithoutProperties(props, [\"aria-describedby\", \"autoComplete\", \"autoFocus\", \"classes\", \"className\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"fullWidth\", \"id\", \"inputComponent\", \"inputProps\", \"inputRef\", \"margin\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onClick\", \"onFocus\", \"onKeyDown\", \"onKeyUp\", \"placeholder\", \"readOnly\", \"renderSuffix\", \"rows\", \"rowsMax\", \"select\", \"startAdornment\", \"type\", \"value\"]);\r\n\r\n  var _React$useRef = React.useRef(value != null),\r\n      isControlled = _React$useRef.current;\r\n\r\n  var inputRef = React.useRef();\r\n  var handleInputRefWarning = React.useCallback(function (instance) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (instance && !(instance instanceof HTMLInputElement) && !instance.focus) {\r\n        console.error(['Material-UI: you have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` prop.', 'Make sure the `inputRef` prop is called with a HTMLInputElement.'].join('\\n'));\r\n      }\r\n    }\r\n  }, []);\r\n  var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);\r\n  var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);\r\n  var handleInputRef = useForkRef(inputRef, handleInputRefProp);\r\n\r\n  var _React$useState = React.useState(false),\r\n      focused = _React$useState[0],\r\n      setFocused = _React$useState[1];\r\n\r\n  var muiFormControl = useFormControl();\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useEffect(function () {\r\n      if (muiFormControl) {\r\n        return muiFormControl.registerEffect();\r\n      }\r\n\r\n      return undefined;\r\n    }, [muiFormControl]);\r\n  }\r\n\r\n  var fcs = formControlState({\r\n    props: props,\r\n    muiFormControl: muiFormControl,\r\n    states: ['disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled']\r\n  });\r\n  fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.\r\n  // We need to book keep the focused state manually.\r\n\r\n  React.useEffect(function () {\r\n    if (!muiFormControl && disabled && focused) {\r\n      setFocused(false);\r\n\r\n      if (onBlur) {\r\n        onBlur();\r\n      }\r\n    }\r\n  }, [muiFormControl, disabled, focused, onBlur]);\r\n  var onFilled = muiFormControl && muiFormControl.onFilled;\r\n  var onEmpty = muiFormControl && muiFormControl.onEmpty;\r\n  var checkDirty = React.useCallback(function (obj) {\r\n    if (isFilled(obj)) {\r\n      if (onFilled) {\r\n        onFilled();\r\n      }\r\n    } else if (onEmpty) {\r\n      onEmpty();\r\n    }\r\n  }, [onFilled, onEmpty]);\r\n  useEnhancedEffect(function () {\r\n    if (isControlled) {\r\n      checkDirty({\r\n        value: value\r\n      });\r\n    }\r\n  }, [value, checkDirty, isControlled]);\r\n\r\n  var handleFocus = function handleFocus(event) {\r\n    // Fix a bug with IE 11 where the focus/blur events are triggered\r\n    // while the input is disabled.\r\n    if (fcs.disabled) {\r\n      event.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    if (onFocus) {\r\n      onFocus(event);\r\n    }\r\n\r\n    if (muiFormControl && muiFormControl.onFocus) {\r\n      muiFormControl.onFocus(event);\r\n    } else {\r\n      setFocused(true);\r\n    }\r\n  };\r\n\r\n  var handleBlur = function handleBlur(event) {\r\n    if (onBlur) {\r\n      onBlur(event);\r\n    }\r\n\r\n    if (muiFormControl && muiFormControl.onBlur) {\r\n      muiFormControl.onBlur(event);\r\n    } else {\r\n      setFocused(false);\r\n    }\r\n  };\r\n\r\n  var handleChange = function handleChange(event) {\r\n    if (!isControlled) {\r\n      var element = event.target || inputRef.current;\r\n\r\n      if (element == null) {\r\n        throw new TypeError('Material-UI: Expected valid input target. ' + 'Did you use a custom `inputComponent` and forget to forward refs? ' + 'See https://material-ui.com/r/input-component-ref-interface for more info.');\r\n      }\r\n\r\n      checkDirty({\r\n        value: element.value\r\n      });\r\n    } // Perform in the willUpdate\r\n\r\n\r\n    if (onChange) {\r\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        args[_key - 1] = arguments[_key];\r\n      }\r\n\r\n      onChange.apply(void 0, [event].concat(args));\r\n    }\r\n  }; // Check the input state on mount, in case it was filled by the user\r\n  // or auto filled by the browser before the hydration (for SSR).\r\n\r\n\r\n  React.useEffect(function () {\r\n    checkDirty(inputRef.current);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  var handleClick = function handleClick(event) {\r\n    if (inputRef.current && event.currentTarget === event.target) {\r\n      inputRef.current.focus();\r\n    }\r\n\r\n    if (onClick) {\r\n      onClick(event);\r\n    }\r\n  };\r\n\r\n  var InputComponent = inputComponent;\r\n\r\n  var inputProps = _extends({}, inputPropsProp, {\r\n    ref: handleInputRef\r\n  });\r\n\r\n  if (typeof InputComponent !== 'string') {\r\n    inputProps = _extends({\r\n      // Rename ref to inputRef as we don't know the\r\n      // provided `inputComponent` structure.\r\n      inputRef: handleInputRef,\r\n      type: type\r\n    }, inputProps, {\r\n      ref: null\r\n    });\r\n  } else if (multiline) {\r\n    if (rows && !rowsMax) {\r\n      InputComponent = 'textarea';\r\n    } else {\r\n      inputProps = _extends({\r\n        rows: rows,\r\n        rowsMax: rowsMax\r\n      }, inputProps);\r\n      InputComponent = TextareaAutosize;\r\n    }\r\n  } else {\r\n    inputProps = _extends({\r\n      type: type\r\n    }, inputProps);\r\n  }\r\n\r\n  var handleAutoFill = function handleAutoFill() {\r\n    // Provide a fake value as Chrome might not let you access it for security reasons.\r\n    checkDirty({\r\n      value: 'x'\r\n    });\r\n  };\r\n\r\n  return React.createElement(\"div\", _extends({\r\n    className: clsx(classes.root, classNameProp, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, {\r\n      dense: classes.marginDense\r\n    }[fcs.margin]),\r\n    onClick: handleClick,\r\n    ref: ref\r\n  }, other), startAdornment, React.createElement(FormControlContext.Provider, {\r\n    value: null\r\n  }, React.createElement(InputComponent, _extends({\r\n    \"aria-invalid\": fcs.error,\r\n    \"aria-describedby\": ariaDescribedby,\r\n    autoComplete: autoComplete,\r\n    autoFocus: autoFocus,\r\n    className: clsx(classes.input, inputPropsClassName, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, select && classes.inputSelect, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, {\r\n      search: classes.inputTypeSearch\r\n    }[type], {\r\n      dense: classes.inputMarginDense\r\n    }[fcs.margin]),\r\n    defaultValue: defaultValue,\r\n    disabled: fcs.disabled,\r\n    id: id,\r\n    onAnimationStart: handleAutoFill,\r\n    name: name,\r\n    onBlur: handleBlur,\r\n    onChange: handleChange,\r\n    onFocus: handleFocus,\r\n    onKeyDown: onKeyDown,\r\n    onKeyUp: onKeyUp,\r\n    placeholder: placeholder,\r\n    readOnly: readOnly,\r\n    required: fcs.required,\r\n    rows: rows,\r\n    value: value\r\n  }, inputProps))), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {\r\n    startAdornment: startAdornment\r\n  })) : null);\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? InputBase.propTypes = {\r\n  /**\r\n   * @ignore\r\n   */\r\n  'aria-describedby': PropTypes.string,\r\n\r\n  /**\r\n   * This prop helps users to fill forms faster, especially on mobile devices.\r\n   * The name can be confusing, as it's more like an autofill.\r\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\r\n   */\r\n  autoComplete: PropTypes.string,\r\n\r\n  /**\r\n   * If `true`, the `input` element will be focused during the first mount.\r\n   */\r\n  autoFocus: PropTypes.bool,\r\n\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  /**\r\n   * The CSS class name of the wrapper element.\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * The default `input` element value. Use when the component is not controlled.\r\n   */\r\n  defaultValue: PropTypes.any,\r\n\r\n  /**\r\n   * If `true`, the `input` element will be disabled.\r\n   */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * End `InputAdornment` for this component.\r\n   */\r\n  endAdornment: PropTypes.node,\r\n\r\n  /**\r\n   * If `true`, the input will indicate an error. This is normally obtained via context from\r\n   * FormControl.\r\n   */\r\n  error: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the input will take up the full width of its container.\r\n   */\r\n  fullWidth: PropTypes.bool,\r\n\r\n  /**\r\n   * The id of the `input` element.\r\n   */\r\n  id: PropTypes.string,\r\n\r\n  /**\r\n   * The component used for the `input` element.\r\n   * Either a string to use a DOM element or a component.\r\n   */\r\n  inputComponent: PropTypes.elementType,\r\n\r\n  /**\r\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\r\n   */\r\n  inputProps: PropTypes.object,\r\n\r\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\r\n  inputRef: refType,\r\n\r\n  /**\r\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\r\n   * FormControl.\r\n   */\r\n  margin: PropTypes.oneOf(['dense', 'none']),\r\n\r\n  /**\r\n   * If `true`, a textarea element will be rendered.\r\n   */\r\n  multiline: PropTypes.bool,\r\n\r\n  /**\r\n   * Name attribute of the `input` element.\r\n   */\r\n  name: PropTypes.string,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onBlur: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value` (string).\r\n   */\r\n  onChange: PropTypes.func,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onClick: PropTypes.func,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onFocus: PropTypes.func,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onKeyDown: PropTypes.func,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onKeyUp: PropTypes.func,\r\n\r\n  /**\r\n   * The short hint displayed in the input before the user enters a value.\r\n   */\r\n  placeholder: PropTypes.string,\r\n\r\n  /**\r\n   * It prevents the user from changing the value of the field\r\n   * (not from interacting with the field).\r\n   */\r\n  readOnly: PropTypes.bool,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  renderSuffix: PropTypes.func,\r\n\r\n  /**\r\n   * If `true`, the `input` element will be required.\r\n   */\r\n  required: PropTypes.bool,\r\n\r\n  /**\r\n   * Number of rows to display when multiline option is set to true.\r\n   */\r\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n  /**\r\n   * Maximum number of rows to display when multiline option is set to true.\r\n   */\r\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n  /**\r\n   * Should be `true` when the component hosts a select.\r\n   */\r\n  select: PropTypes.bool,\r\n\r\n  /**\r\n   * Start `InputAdornment` for this component.\r\n   */\r\n  startAdornment: PropTypes.node,\r\n\r\n  /**\r\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\r\n   */\r\n  type: PropTypes.string,\r\n\r\n  /**\r\n   * The value of the `input` element, required for a controlled component.\r\n   */\r\n  value: PropTypes.any\r\n} : void 0;\r\nexport default withStyles(styles, {\r\n  name: 'MuiInputBase'\r\n})(InputBase);"]},"metadata":{},"sourceType":"module"}