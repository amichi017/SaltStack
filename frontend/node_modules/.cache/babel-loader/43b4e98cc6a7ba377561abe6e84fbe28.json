{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if there are children and not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover'\n    }\n  };\n};\nvar Avatar = React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      childrenClassNameProp = props.childrenClassName,\n      classes = props.classes,\n      classNameProp = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"childrenClassName\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\"]);\n\n  var children = null;\n  var img = src || srcSet;\n\n  if (img) {\n    children = React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps));\n  } else if (childrenClassNameProp && React.isValidElement(childrenProp)) {\n    children = React.cloneElement(childrenProp, {\n      className: clsx(childrenClassNameProp, childrenProp.props.className)\n    });\n  } else {\n    children = childrenProp;\n  }\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classNameProp, !img && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  /**\r\n   * Used in combination with `src` or `srcSet` to\r\n   * provide an alt attribute for the rendered `img` element.\r\n   */\n  alt: PropTypes.string,\n\n  /**\r\n   * Used to render icon or text elements inside the Avatar.\r\n   * `src` and `alt` props will not be used and no `img` will\r\n   * be rendered by default.\r\n   *\r\n   * This can be an element, or just a string.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * @ignore\r\n   * The className of the child element.\r\n   * Used by Chip and ListItemIcon to style the Avatar icon.\r\n   */\n  childrenClassName: PropTypes.string,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a DOM element or a component.\r\n   */\n  component: PropTypes.elementType,\n\n  /**\r\n   * Attributes applied to the `img` element if the component\r\n   * is used to display an image.\r\n   */\n  imgProps: PropTypes.object,\n\n  /**\r\n   * The `sizes` attribute for the `img` element.\r\n   */\n  sizes: PropTypes.string,\n\n  /**\r\n   * The `src` attribute for the `img` element.\r\n   */\n  src: PropTypes.string,\n\n  /**\r\n   * The `srcSet` attribute for the `img` element.\r\n   */\n  srcSet: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","map":{"version":3,"sources":["C:/react/SaltStack/frontend/node_modules/@material-ui/core/esm/Avatar/Avatar.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","withStyles","styles","theme","root","position","display","alignItems","justifyContent","flexShrink","width","height","fontFamily","typography","fontSize","pxToRem","borderRadius","overflow","userSelect","colorDefault","color","palette","background","default","backgroundColor","type","grey","img","textAlign","objectFit","Avatar","forwardRef","props","ref","alt","childrenProp","children","childrenClassNameProp","childrenClassName","classes","classNameProp","className","_props$component","component","Component","imgProps","sizes","src","srcSet","other","createElement","isValidElement","cloneElement","system","process","env","NODE_ENV","propTypes","string","node","object","isRequired","elementType","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport withStyles from '../styles/withStyles';\r\nexport var styles = function styles(theme) {\r\n  return {\r\n    /* Styles applied to the root element. */\r\n    root: {\r\n      position: 'relative',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      flexShrink: 0,\r\n      width: 40,\r\n      height: 40,\r\n      fontFamily: theme.typography.fontFamily,\r\n      fontSize: theme.typography.pxToRem(20),\r\n      borderRadius: '50%',\r\n      overflow: 'hidden',\r\n      userSelect: 'none'\r\n    },\r\n\r\n    /* Styles applied to the root element if there are children and not `src` or `srcSet`. */\r\n    colorDefault: {\r\n      color: theme.palette.background.default,\r\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\r\n    },\r\n\r\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\r\n    img: {\r\n      width: '100%',\r\n      height: '100%',\r\n      textAlign: 'center',\r\n      // Handle non-square image. The property isn't supported by IE 11.\r\n      objectFit: 'cover'\r\n    }\r\n  };\r\n};\r\nvar Avatar = React.forwardRef(function Avatar(props, ref) {\r\n  var alt = props.alt,\r\n      childrenProp = props.children,\r\n      childrenClassNameProp = props.childrenClassName,\r\n      classes = props.classes,\r\n      classNameProp = props.className,\r\n      _props$component = props.component,\r\n      Component = _props$component === void 0 ? 'div' : _props$component,\r\n      imgProps = props.imgProps,\r\n      sizes = props.sizes,\r\n      src = props.src,\r\n      srcSet = props.srcSet,\r\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"childrenClassName\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\"]);\r\n\r\n  var children = null;\r\n  var img = src || srcSet;\r\n\r\n  if (img) {\r\n    children = React.createElement(\"img\", _extends({\r\n      alt: alt,\r\n      src: src,\r\n      srcSet: srcSet,\r\n      sizes: sizes,\r\n      className: classes.img\r\n    }, imgProps));\r\n  } else if (childrenClassNameProp && React.isValidElement(childrenProp)) {\r\n    children = React.cloneElement(childrenProp, {\r\n      className: clsx(childrenClassNameProp, childrenProp.props.className)\r\n    });\r\n  } else {\r\n    children = childrenProp;\r\n  }\r\n\r\n  return React.createElement(Component, _extends({\r\n    className: clsx(classes.root, classes.system, classNameProp, !img && classes.colorDefault),\r\n    ref: ref\r\n  }, other), children);\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\r\n  /**\r\n   * Used in combination with `src` or `srcSet` to\r\n   * provide an alt attribute for the rendered `img` element.\r\n   */\r\n  alt: PropTypes.string,\r\n\r\n  /**\r\n   * Used to render icon or text elements inside the Avatar.\r\n   * `src` and `alt` props will not be used and no `img` will\r\n   * be rendered by default.\r\n   *\r\n   * This can be an element, or just a string.\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * @ignore\r\n   * The className of the child element.\r\n   * Used by Chip and ListItemIcon to style the Avatar icon.\r\n   */\r\n  childrenClassName: PropTypes.string,\r\n\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a DOM element or a component.\r\n   */\r\n  component: PropTypes.elementType,\r\n\r\n  /**\r\n   * Attributes applied to the `img` element if the component\r\n   * is used to display an image.\r\n   */\r\n  imgProps: PropTypes.object,\r\n\r\n  /**\r\n   * The `sizes` attribute for the `img` element.\r\n   */\r\n  sizes: PropTypes.string,\r\n\r\n  /**\r\n   * The `src` attribute for the `img` element.\r\n   */\r\n  src: PropTypes.string,\r\n\r\n  /**\r\n   * The `srcSet` attribute for the `img` element.\r\n   */\r\n  srcSet: PropTypes.string\r\n} : void 0;\r\nexport default withStyles(styles, {\r\n  name: 'MuiAvatar'\r\n})(Avatar);"]},"metadata":{},"sourceType":"module"}