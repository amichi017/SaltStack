{"ast":null,"code":"// import axios from './node_modules/axios';\n// import { returnErrors } from './errorActions';\n// import {\n// AUTH_ERROR,\n// LOGIN_SUCCESS,\n// LOGIN_FAIL,\n// LOGOUT_SUCCESS,\n// REGISTER_SUCCESS,\n// REGISTER_FAIL,\n// USER_LOADING,\n// USER_LOADED\n// } from './types';\n// // Check token & load user\n// export const loadUser = () => (dispatch, getState) => {\n//     // User loading\n//     dispatch({ type: USER_LOADING });\n//     axios\n//       .get('http://127.0.0.1:5000/auth/user', tokenConfig(getState))\n//       .then(res =>\n//         dispatch({\n//           type: USER_LOADED,\n//           payload: res.data\n//         })\n//       )\n//       .catch(err => {\n//         dispatch(returnErrors(err.response.data, err.response.status));\n//          dispatch({\n//           type: AUTH_ERROR\n//         });\n//       });\n//   };\n// export const register = ({ first_name, last_name, email, password }) => dispatch => {\n//     // Headers\n//     const config = {\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     }\n//     // Request body\n//     const body = JSON.stringify({first_name, last_name, email, password });\n//     axios.post('\"http://127.0.0.1:5000/register\"', body, config)\n//     .then(res => dispatch({\n//         type: REGISTER_SUCCESS,\n//         payload: res.data\n//     }))\n//     .catch(err => {\n//         dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n//         dispatch({\n//             type: REGISTER_FAIL\n//         })\n//     })\n// }\n// export const login = ({ email, password }) => dispatch => {\n//     // Headers\n//     const config = {\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     }\n//     // Request body\n//     const body = JSON.stringify({ email, password });\n//     axios.post('http://127.0.0.1:5000/auth', body, config)\n//     .then(res => dispatch({\n//         type: LOGIN_SUCCESS,\n//         payload: res.data,\n//     }))\n//     .catch(err => {\n//         dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n//         dispatch({\n//             type: LOGIN_FAIL\n//         })\n//     })\n// }\n// // Logout User\n// export const logout = () => dispatch => {\n//     dispatch({\n//         type: LOGOUT_SUCCESS\n//     })\n//   };\n// // Setup config/headers and token\n// export const tokenConfig = getState => {\n//        // Get token from localstorage\n//        const token = getState().auth.token;\n//        // Headers\n//        const config = {\n//            headers: {\n//                \"Content-type\": \"application/json\"\n//            }\n//        }\n//        // If token, add to headers\n//        if(token) {\n//           config.headers[\"Authorization\"] = ` Bearer ${token} `;\n//        }\n//     return config;\n// }","map":{"version":3,"sources":["C:/react/saltStack/frontend/src/actions/authActions.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// import axios from './node_modules/axios';\r\n// import { returnErrors } from './errorActions';\r\n\r\n// import {\r\n// AUTH_ERROR,\r\n// LOGIN_SUCCESS,\r\n// LOGIN_FAIL,\r\n// LOGOUT_SUCCESS,\r\n// REGISTER_SUCCESS,\r\n// REGISTER_FAIL,\r\n// USER_LOADING,\r\n// USER_LOADED\r\n// } from './types';\r\n\r\n\r\n\r\n// // Check token & load user\r\n// export const loadUser = () => (dispatch, getState) => {\r\n//     // User loading\r\n//     dispatch({ type: USER_LOADING });\r\n//     axios\r\n//       .get('http://127.0.0.1:5000/auth/user', tokenConfig(getState))\r\n//       .then(res =>\r\n//         dispatch({\r\n//           type: USER_LOADED,\r\n//           payload: res.data\r\n//         })\r\n//       )\r\n//       .catch(err => {\r\n//         dispatch(returnErrors(err.response.data, err.response.status));\r\n//          dispatch({\r\n//           type: AUTH_ERROR\r\n//         });\r\n//       });\r\n//   };\r\n\r\n\r\n// export const register = ({ first_name, last_name, email, password }) => dispatch => {\r\n//     // Headers\r\n//     const config = {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     }\r\n\r\n//     // Request body\r\n//     const body = JSON.stringify({first_name, last_name, email, password });\r\n\r\n//     axios.post('\"http://127.0.0.1:5000/register\"', body, config)\r\n//     .then(res => dispatch({\r\n//         type: REGISTER_SUCCESS,\r\n//         payload: res.data\r\n//     }))\r\n//     .catch(err => {\r\n//         dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\r\n//         dispatch({\r\n//             type: REGISTER_FAIL\r\n//         })\r\n//     })\r\n// }\r\n\r\n// export const login = ({ email, password }) => dispatch => {\r\n//     // Headers\r\n//     const config = {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     }\r\n\r\n//     // Request body\r\n//     const body = JSON.stringify({ email, password });\r\n\r\n//     axios.post('http://127.0.0.1:5000/auth', body, config)\r\n//     .then(res => dispatch({\r\n//         type: LOGIN_SUCCESS,\r\n//         payload: res.data,\r\n            \r\n//     }))\r\n//     .catch(err => {\r\n//         dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\r\n//         dispatch({\r\n//             type: LOGIN_FAIL\r\n//         })\r\n//     })\r\n// }\r\n\r\n// // Logout User\r\n// export const logout = () => dispatch => {\r\n//     dispatch({\r\n//         type: LOGOUT_SUCCESS\r\n//     })\r\n//   };\r\n\r\n  \r\n// // Setup config/headers and token\r\n// export const tokenConfig = getState => {\r\n//        // Get token from localstorage\r\n//        const token = getState().auth.token;\r\n     \r\n//        // Headers\r\n//        const config = {\r\n//            headers: {\r\n//                \"Content-type\": \"application/json\"\r\n//            }\r\n//        }\r\n   \r\n//        // If token, add to headers\r\n//        if(token) {\r\n//           config.headers[\"Authorization\"] = ` Bearer ${token} `;\r\n//        }\r\n\r\n//     return config;\r\n// }"]},"metadata":{},"sourceType":"module"}