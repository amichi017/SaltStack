{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport { DATE_SELECT, SALT_RETURNS } from './types'; // Date is select\n\nexport const dateSelect = (start, end) => {\n  return {\n    type: DATE_SELECT,\n    payload: {\n      start,\n      end\n    }\n  }; // console.log(\"start \",start);\n  // console.log(\"end \",end);\n};\n\nconst date = str => {\n  const year = str.slice(0, 4);\n  const month = String(parseInt(str.slice(4, 6)) - 1);\n  const day = str.slice(6, 8);\n  return String(day) + \"/\" + String(month) + \"/\" + String(year);\n}; //  const year=(str)=>{\n//     return str.slice(0,4);\n//  }\n//  const month=(str)=>{\n//     return String(parseInt(str.slice(4,6))-1)\n//  }\n//  const day=(str)=>{\n//     return str.slice(6,8);\n// }\n// Clear date\n\n\nexport const saltReturns = () => (dispatch, getState) => {\n  const time = new Date().toDateString();\n  let startYear = store.getState().date.start,\n      startMonth = store.getState().date.start.getMonth();\n  let endYear = store.getState().date.end,\n      endMonth = store.getState().date.end.getMonth();\n  console.log(store.getState(), \"the store from date \");\n\n  if (getState().auth.token !== null) {} // console.log(\"ppppppppppppppppp\");}\n\n\n  let data = [];\n\n  for (let index = startYear; index <= endYear; index.setDate(index.getFullYear() + 1)) {\n    axios.get('http://127.0.0.1:5000/api/saltReturns/apply/' + '${index.getFullYear()}', tokenConfig(getState)).then(res => {\n      data.concat(res.data);\n      console.log(res.data, \"res.data\");\n    }).catch(err => {\n      console.log(err, \"error in data\");\n    });\n  }\n\n  store.dispatch({\n    type: SALT_RETURNS,\n    payload: data\n  });\n}; //  //Clear date\n//  export const saltReturns =  () => (dispatch, getState) => {\n//      const time =new Date().toDateString();\n//  // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n//      axios.get('http://127.0.0.1:5000/api/saltReturns', tokenConfig(getState))\n//     .then((res) => { \n//         // console.log(res,\"res\");\n//     store.dispatch({\n//         type: SALT_RETURNS,\n//         payload: res.data\n//     })})\n//     .catch(err => {\n//         console.log(err,\"error in data\");\n//        });\n//        console.log(store.getState(),\"the store \");\n// };\n// Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.access_token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"multipart/form-data\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers[\"Authorization\"] = ` Bearer ${token} `;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/react/SaltStack/frontend/src/actions/date.js"],"names":["axios","store","DATE_SELECT","SALT_RETURNS","dateSelect","start","end","type","payload","date","str","year","slice","month","String","parseInt","day","saltReturns","dispatch","getState","time","Date","toDateString","startYear","startMonth","getMonth","endYear","endMonth","console","log","auth","token","data","index","setDate","getFullYear","get","tokenConfig","then","res","concat","catch","err","access_token","config","headers"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport store from '../store'\r\n import { DATE_SELECT, SALT_RETURNS} from './types';\r\n // Date is select\r\n export const dateSelect = (start , end) => {\r\n   \r\n     return {\r\n                 type: DATE_SELECT,\r\n                 payload:{start,end}\r\n              };\r\n     // console.log(\"start \",start);\r\n     // console.log(\"end \",end);\r\n     \r\n }\r\n \r\n const  date=(str)=>{\r\n    const year =str.slice(0,4);\r\n    const month =String(parseInt(str.slice(4,6))-1);\r\n    const day =str.slice(6,8);\r\n    return String(day)+\"/\"+String(month)+\"/\"+String(year);\r\n  \r\n  }\r\n//  const year=(str)=>{\r\n//     return str.slice(0,4);\r\n//  }\r\n//  const month=(str)=>{\r\n//     return String(parseInt(str.slice(4,6))-1)\r\n//  }\r\n//  const day=(str)=>{\r\n//     return str.slice(6,8);\r\n// }\r\n // Clear date\r\n  export const saltReturns =  () => (dispatch, getState) => {\r\n     \r\n    const time =new Date().toDateString();\r\n    let startYear=store.getState().date.start,startMonth=store.getState().date.start.getMonth();\r\n    let endYear=store.getState().date.end,endMonth=store.getState().date.end.getMonth();\r\n    \r\n  \r\n    console.log(store.getState(),\"the store from date \");\r\n if(getState().auth.token !== null){   }  // console.log(\"ppppppppppppppppp\");}\r\nlet data=[];\r\n for (let index = startYear; index <= endYear; index.setDate(index.getFullYear() + 1)) {\r\n     \r\n    axios.get('http://127.0.0.1:5000/api/saltReturns/apply/'+'${index.getFullYear()}', tokenConfig(getState))\r\n    .then((res) => { \r\n        data.concat(res.data);\r\n         console.log(res.data,\"res.data\");\r\n    })\r\n    .catch(err => {\r\n        console.log(err,\"error in data\");\r\n       \r\n       });\r\n }\r\n store.dispatch({\r\n    type: SALT_RETURNS,\r\n    payload: data\r\n})\r\n   \r\n};\r\n//  //Clear date\r\n//  export const saltReturns =  () => (dispatch, getState) => {\r\n     \r\n//      const time =new Date().toDateString();\r\n\r\n//  // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\r\n//      axios.get('http://127.0.0.1:5000/api/saltReturns', tokenConfig(getState))\r\n//     .then((res) => { \r\n        \r\n//         // console.log(res,\"res\");\r\n//     store.dispatch({\r\n//         type: SALT_RETURNS,\r\n//         payload: res.data\r\n//     })})\r\n//     .catch(err => {\r\n//         console.log(err,\"error in data\");\r\n       \r\n//        });\r\n\r\n//        console.log(store.getState(),\"the store \");\r\n// };\r\n\r\n\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n    // Get token from localstorage\r\n    const token = getState().auth.access_token;\r\n  \r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"multipart/form-data\"\r\n        }\r\n    }\r\n\r\n    // If token, add to headers\r\n    if(token) {\r\n       config.headers[\"Authorization\"] = ` Bearer ${token} `;\r\n    }\r\n\r\n return config;\r\n}"]},"metadata":{},"sourceType":"module"}