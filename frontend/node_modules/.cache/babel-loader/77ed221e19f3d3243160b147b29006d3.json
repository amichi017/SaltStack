{"ast":null,"code":"import _objectWithoutProperties from \"/home/avraham/SaltStack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/avraham/SaltStack/frontend/src/Landing.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Dashboard from \"./Dashboard\";\nimport LoginForm from './Component/auth/LoginForm';\nimport RegisterForm from './Component/auth/RegisterForm';\nimport { createStore } from 'redux';\nimport appReducer from './reducers/index';\nimport { Provider } from 'react-redux';\nimport { loadUser } from './actions/authActions';\nimport { Store, ExitToApp } from '@material-ui/icons';\nimport store from './store';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types'; // This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\n\nclass Landing extends Component {\n  constructor(props) {\n    super(props);\n    store.dispatch(loadUser());\n    console.log('hhhhh', store.getState()); // Don't call this.setState() here!\n\n    setTimeout(function () {\n      store.dispatch(loadUser());\n      console.log('hhhhh', store);\n    }.bind(this), 10000);\n    console.log(this.props.auth);\n    this.state = {\n      isLoggedIn: this.props.auth.isAuthenticated\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoggedIn: this.props.auth.isAuthenticated\n    });\n  }\n\n  render() {\n    const _this$props$auth = this.props.auth,\n          isAuthenticated = _this$props$auth.isAuthenticated,\n          user = _this$props$auth.user;\n    return React.createElement(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(PrivateRoute, {\n      exact: true,\n      path: \"/\",\n      isLoggedIn: this.isLoggedIn,\n      component: Dashboard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/login\",\n      component: LoginForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"*\",\n      component: () => React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"404 NOT FOUND\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nLanding.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst PrivateRoute = (_ref) => {\n  let Component = _ref.component,\n      isLoggedIn = _ref.isLoggedIn,\n      props = _objectWithoutProperties(_ref, [\"component\", \"isLoggedIn\"]);\n\n  console.log(isLoggedIn);\n  console.log(\"routingg\");\n  return React.createElement(Route, Object.assign({}, props, {\n    render: props => isLoggedIn ? React.createElement(Component, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })) : React.createElement(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: props.location\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, null)(Landing);","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/Landing.js"],"names":["React","Component","BrowserRouter","Route","Switch","Redirect","Dashboard","LoginForm","RegisterForm","createStore","appReducer","Provider","loadUser","Store","ExitToApp","store","connect","PropTypes","Landing","constructor","props","dispatch","console","log","getState","setTimeout","bind","auth","state","isLoggedIn","isAuthenticated","componentDidMount","setState","render","user","propTypes","object","isRequired","PrivateRoute","component","pathname","from","location","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Dashboard from \"./Dashboard\";\nimport LoginForm from './Component/auth/LoginForm';\nimport RegisterForm from './Component/auth/RegisterForm';\nimport { createStore } from 'redux';\nimport appReducer from './reducers/index';\nimport {Provider} from 'react-redux';\nimport { loadUser } from './actions/authActions';\nimport { Store, ExitToApp } from '@material-ui/icons';\nimport store from './store';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nclass Landing extends Component {\n  constructor(props) {\n    super(props);\n    store.dispatch(loadUser());\n    console.log('hhhhh',store.getState())\n    // Don't call this.setState() here!\n    setTimeout(\n      function() {\n        store.dispatch(loadUser());\n        console.log('hhhhh',store)\n      }\n      .bind(this),\n      10000\n  );\n    console.log(this.props.auth)\n    this.state = {\n      isLoggedIn: this.props.auth.isAuthenticated\n    };\n  }\n\n  componentDidMount(){\n    this.setState({\n      isLoggedIn: this.props.auth.isAuthenticated\n    })\n  }\n  static propTypes = {\n    auth: PropTypes.object.isRequired\n  };\n\n  \n  render() {\n    const { isAuthenticated, user } = this.props.auth;\n    return (\n      <Provider store={store} >\n      <BrowserRouter>\n          <Switch>\n              <PrivateRoute  exact path=\"/\" isLoggedIn={ this.isLoggedIn } component={Dashboard} />\n              {/* <Route path=\"/register\" component={ RegisterForm}/> */}\n              <Route path=\"/login\" component={ LoginForm} />\n              <Route path=\"*\" component={() => \n                <h1>\n                  404 NOT FOUND\n                  </h1>} />\n            </Switch>  \n      </BrowserRouter>\n      </Provider>\n      \n             \n    );\n  }\n}\n\n\n\n\nconst PrivateRoute = ({ component: Component,isLoggedIn, ...props }) => \n{\n  console.log(isLoggedIn)\n  console.log(\"routingg\")\n  return (\n    <Route\n      {...props}\n      render = {(props) => isLoggedIn\n        ? <Component {...props} />\n        : <Redirect to={{pathname: '/login', state: {from: props.location}}} />}\n    />\n  )\n}\n\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Landing);\n\n"]},"metadata":{},"sourceType":"module"}