{"ast":null,"code":"var _jsxFileName = \"/home/avraham/SaltStack/frontend/src/App.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useHistory, useLocation } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport LoginForm from './Component/LoginForm';\nimport RegisterForm from './Component/RegisterForm';\nimport { createStore } from 'redux';\nimport appReducer from './reducers/index';\nimport { Provider } from 'react-redux';\n\nconst App = () => React.createElement(\"div\", {\n  className: \"app-routes\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"/login\",\n  component: LoginForm,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/\",\n  component: Dashboard,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n})));\n\nexport default App; // // This example has 3 pages: a public page, a protected\n// // page, and a login screen. In order to see the protected\n// // page, you must first login. Pretty standard stuff.\n// //\n// // First, visit the public page. Then, visit the protected\n// // page. You're not yet logged in, so you are redirected\n// // to the login page. After you login, you are redirected\n// // back to the protected page.\n// //\n// // Notice the URL change each time. If you click the back\n// // button at this point, would you expect to go back to the\n// // login page? No! You're already logged in. Try it out,\n// // and you'll see you go back to the page you visited\n// // just *before* logging in, the public page.\n// export default function AuthExample() {\n//   return (\n//     <Router>\n//       <div>\n//         <AuthButton />\n//         <Switch>\n//           <Route path=\"/public\">\n//             <PublicPage />\n//           </Route>\n//           <Route path=\"/login\">\n//             <LoginPage />\n//           </Route>\n//           <PrivateRoute path=\"/\">\n//             <ProtectedPage />\n//           </PrivateRoute>\n//         </Switch>\n//       </div>\n//     </Router>\n//   );\n// }\n// const fakeAuth = {\n//   isAuthenticated: false,\n//   authenticate(cb) {\n//     fakeAuth.isAuthenticated = true;\n//     setTimeout(cb, 100); // fake async\n//   },\n//   signout(cb) {\n//     fakeAuth.isAuthenticated = false;\n//     setTimeout(cb, 100);\n//   }\n// };\n// function AuthButton() {\n//   let history = useHistory();\n//   return fakeAuth.isAuthenticated ? (\n//     <p>\n//       Welcome!{\" \"}\n//       <button\n//         onClick={() => {\n//           fakeAuth.signout(() => history.push(\"/\"));\n//         }}\n//       >\n//         Sign out\n//       </button>\n//     </p>\n//   ) : (\n//     <p>You are not logged in.</p>\n//   );\n// }\n// // A wrapper for <Route> that redirects to the login\n// // screen if you're not yet authenticated.\n// function PrivateRoute({ children, ...rest }) {\n//   return (\n//     <Route\n//       {...rest}\n//       render={({ location }) =>\n//         fakeAuth.isAuthenticated ? (\n//           children\n//         ) : (\n//           <Redirect\n//             to={{\n//               pathname: \"/login\",\n//               state: { from: location }\n//             }}\n//           />\n//         )\n//       }\n//     />\n//   );\n// }\n// function PublicPage() {\n//   return <h3>Public</h3>;\n// }\n// function ProtectedPage() {\n//   const store = createStore(appReducer);\n//   return ( <Provider store={store}>\n//            <Dashboard />\n//            </Provider> );\n// }\n// function LoginPage() {\n//   let history = useHistory();\n//   let location = useLocation();\n//   const store = createStore(appReducer);\n//   let { from } = location.state || { from: { pathname: \"/\" } };\n//   let login = () => {\n//     fakeAuth.authenticate(() => {\n//       history.replace(from);\n//     });\n//   };\n//   return (\n//     <Provider store={store}>\n//     <LoginForm />\n//     </Provider>  \n//   );\n// }","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/App.js"],"names":["React","BrowserRouter","Router","Switch","Route","Link","Redirect","useHistory","useLocation","Dashboard","LoginForm","RegisterForm","createStore","appReducer","Provider","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,EAKEC,QALF,EAMEC,UANF,EAOEC,WAPF,QAQO,kBARP;AASA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,QAAR,QAAuB,aAAvB;;AAIA,MAAMC,GAAG,GAAG,MACV;AAAK,EAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,QAAZ;AAAqB,EAAA,SAAS,EAAEL,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,GAAZ;AAAgB,EAAA,SAAS,EAAED,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CADF,CADF;;AASA,eAAeM,GAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation\n} from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport LoginForm from './Component/LoginForm';\nimport RegisterForm from './Component/RegisterForm';\nimport { createStore } from 'redux';\nimport appReducer from './reducers/index';\nimport {Provider} from 'react-redux';\n\n\n\nconst App = () => (\n  <div className=\"app-routes\">\n    <Switch>\n      <Route path=\"/login\" component={LoginForm} />\n      <Route path=\"/\" component={Dashboard} />\n    </Switch>\n  </div>\n);\n\nexport default App;\n\n\n\n// // This example has 3 pages: a public page, a protected\n// // page, and a login screen. In order to see the protected\n// // page, you must first login. Pretty standard stuff.\n// //\n// // First, visit the public page. Then, visit the protected\n// // page. You're not yet logged in, so you are redirected\n// // to the login page. After you login, you are redirected\n// // back to the protected page.\n// //\n// // Notice the URL change each time. If you click the back\n// // button at this point, would you expect to go back to the\n// // login page? No! You're already logged in. Try it out,\n// // and you'll see you go back to the page you visited\n// // just *before* logging in, the public page.\n\n// export default function AuthExample() {\n  \n//   return (\n//     <Router>\n//       <div>\n//         <AuthButton />\n\n//         <Switch>\n//           <Route path=\"/public\">\n//             <PublicPage />\n//           </Route>\n//           <Route path=\"/login\">\n//             <LoginPage />\n//           </Route>\n//           <PrivateRoute path=\"/\">\n//             <ProtectedPage />\n//           </PrivateRoute>\n//         </Switch>\n//       </div>\n//     </Router>\n//   );\n// }\n\n// const fakeAuth = {\n//   isAuthenticated: false,\n//   authenticate(cb) {\n//     fakeAuth.isAuthenticated = true;\n//     setTimeout(cb, 100); // fake async\n//   },\n//   signout(cb) {\n//     fakeAuth.isAuthenticated = false;\n//     setTimeout(cb, 100);\n//   }\n// };\n\n// function AuthButton() {\n//   let history = useHistory();\n\n//   return fakeAuth.isAuthenticated ? (\n//     <p>\n//       Welcome!{\" \"}\n//       <button\n//         onClick={() => {\n//           fakeAuth.signout(() => history.push(\"/\"));\n//         }}\n//       >\n//         Sign out\n//       </button>\n//     </p>\n//   ) : (\n//     <p>You are not logged in.</p>\n//   );\n// }\n\n// // A wrapper for <Route> that redirects to the login\n// // screen if you're not yet authenticated.\n// function PrivateRoute({ children, ...rest }) {\n//   return (\n//     <Route\n//       {...rest}\n//       render={({ location }) =>\n//         fakeAuth.isAuthenticated ? (\n//           children\n//         ) : (\n//           <Redirect\n//             to={{\n//               pathname: \"/login\",\n//               state: { from: location }\n//             }}\n//           />\n//         )\n//       }\n//     />\n//   );\n// }\n\n// function PublicPage() {\n//   return <h3>Public</h3>;\n// }\n\n// function ProtectedPage() {\n//   const store = createStore(appReducer);\n\n//   return ( <Provider store={store}>\n//            <Dashboard />\n//            </Provider> );\n// }\n\n// function LoginPage() {\n//   let history = useHistory();\n//   let location = useLocation();\n//   const store = createStore(appReducer);\n\n//   let { from } = location.state || { from: { pathname: \"/\" } };\n//   let login = () => {\n//     fakeAuth.authenticate(() => {\n//       history.replace(from);\n//     });\n//   };\n\n//   return (\n//     <Provider store={store}>\n//     <LoginForm />\n//     </Provider>  \n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}