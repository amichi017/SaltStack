{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport { DATE_SELECT, SALT_RETURNS } from './types'; // Date is select\n\nexport const dateSelect = (start, end) => {\n  return {\n    type: DATE_SELECT,\n    payload: {\n      start,\n      end\n    }\n  }; // console.log(\"start \",start);\n  // console.log(\"end \",end);\n}; //  // Clear date\n//   export const saltReturns =  () => (dispatch, getState) => {\n//     const time =new Date().toDateString();\n//     let Month= String(parseInt(store.getState().date.start.getMonth()));\n//     Month=parseInt(Month)<10?\"0\"+Month:Month;\n//     let year=String(store.getState().date.start.getFullYear());\n//     let startYear=new Date(year,Month,store.getState().date.start.getDate());\n//     let endYear=store.getState().date.end;\n//     console.log(startYear,\"startYear\");\n//     console.log(endYear,\"endYear\");\n//  if(store.getState().auth.token !== null){   }  // console.log(\"ppppppppppppppppp\");}\n//    let data=[];\n// //  for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n//     let index = startYear\n//     let url='http://127.0.0.1:5000/api/saltReturns/apply/'+index.getFullYear();\n//     console.log(\"url\" ,url);\n//     axios.get(url, tokenConfig(getState))\n//     .then((res) => {\n//         console.log(\"res.data\" ,res.data);\n//         store.dispatch({\n//             type: SALT_RETURNS,\n//             payload: res.data\n//         })\n//     })\n//     .catch(err => {\n//         console.log(err,\"error in data\");\n//        });\n//  //}\n// console.log(store.getState(),\"the store from date \");\n// };\n//Clear date\n\nexport const saltReturns = () => (dispatch, getState) => {\n  console.log(\"----------------------storeeeee--------------\\n\", store);\n  const time = new Date().toDateString();\n  let Month = String(parseInt(store.getState().date.start.getMonth()));\n  Month = parseInt(Month) < 10 ? \"0\" + Month : Month;\n  let year = String(store.getState().date.start.getFullYear());\n  let startYear = new Date(year, Month, store.getState().date.start.getDate());\n  let endYear = store.getState().date.end;\n  let index = startYear; // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n\n  let minions = [];\n\n  for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n    let url = 'http://127.0.0.1:5000/api/saltReturns/apply/' + index.getFullYear();\n    console.log(\"url\", url);\n    axios.get(url, tokenConfig(getState)).then(res => {\n      minions = minions.concat(res.data); /// if(index === endYear){console.log(res,\"res \");}\n\n      store.dispatch({\n        type: SALT_RETURNS,\n        payload: minions\n      }); // console.log(res,\"res\");\n    }).catch(err => {\n      console.log(err, \"error in data\");\n    });\n  }\n\n  console.log(store.getState(), \"the store \");\n  console.log(minions, \"minions \");\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = store.auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"multipart/form-data\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers[\"Authorization\"] = ` Bearer ${token} `;\n  }\n\n  return config;\n}; // export const saltReturns =  () => (dispatch, getState) => {\n//     const time =new Date().toDateString();\n// // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n//     axios.get('http://127.0.0.1:5000/api/saltReturns/apply/2020', tokenConfig(getState))\n//    .then((res) => {\n//        // console.log(res,\"res\");\n//    store.dispatch({\n//        type: SALT_RETURNS,\n//        payload: res.data\n//    })})\n//    .catch(err => {\n//        console.log(err,\"error in data\");\n//       });\n//       console.log(store.getState(),\"the store \");\n// };","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/actions/date.js"],"names":["axios","store","DATE_SELECT","SALT_RETURNS","dateSelect","start","end","type","payload","saltReturns","dispatch","getState","console","log","time","Date","toDateString","Month","String","parseInt","date","getMonth","year","getFullYear","startYear","getDate","endYear","index","minions","setFullYear","url","get","tokenConfig","then","res","concat","data","catch","err","token","auth","config","headers"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport store from '../store'\n import { DATE_SELECT, SALT_RETURNS} from './types';\n // Date is select\n export const dateSelect = (start , end) => {\n\n     return {\n                 type: DATE_SELECT,\n                 payload:{start,end}\n              };\n     // console.log(\"start \",start);\n     // console.log(\"end \",end);\n\n }\n\n//  // Clear date\n//   export const saltReturns =  () => (dispatch, getState) => {\n\n//     const time =new Date().toDateString();\n//     let Month= String(parseInt(store.getState().date.start.getMonth()));\n//     Month=parseInt(Month)<10?\"0\"+Month:Month;\n//     let year=String(store.getState().date.start.getFullYear());\n\n\n//     let startYear=new Date(year,Month,store.getState().date.start.getDate());\n//     let endYear=store.getState().date.end;\n\n//     console.log(startYear,\"startYear\");\n//     console.log(endYear,\"endYear\");\n\n\n//  if(store.getState().auth.token !== null){   }  // console.log(\"ppppppppppppppppp\");}\n\n//    let data=[];\n\n// //  for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n//     let index = startYear\n//     let url='http://127.0.0.1:5000/api/saltReturns/apply/'+index.getFullYear();\n//     console.log(\"url\" ,url);\n//     axios.get(url, tokenConfig(getState))\n//     .then((res) => {\n//         console.log(\"res.data\" ,res.data);\n//         store.dispatch({\n//             type: SALT_RETURNS,\n//             payload: res.data\n//         })\n\n//     })\n//     .catch(err => {\n//         console.log(err,\"error in data\");\n\n//        });\n//  //}\n\n// console.log(store.getState(),\"the store from date \");\n// };\n //Clear date\n export const saltReturns =  () => (dispatch, getState) => {\n     console.log(\"----------------------storeeeee--------------\\n\",store)\n     const time =new Date().toDateString();\n     let Month= String(parseInt(store.getState().date.start.getMonth()));\n         Month=parseInt(Month)<10?\"0\"+Month:Month;\n         let year=String(store.getState().date.start.getFullYear());\n\n\n         let startYear=new Date(year,Month,store.getState().date.start.getDate());\n         let endYear=store.getState().date.end;\n         let index = startYear;\n // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n        let minions=[];\n for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n\n     let url='http://127.0.0.1:5000/api/saltReturns/apply/'+index.getFullYear();\n     console.log(\"url\" ,url);\n     axios.get(url, tokenConfig(getState))\n    .then((res) => {\n\n        minions=minions.concat(res.data);\n       /// if(index === endYear){console.log(res,\"res \");}\n        store.dispatch({\n            type: SALT_RETURNS,\n            payload: minions\n        })\n        // console.log(res,\"res\");\n    })\n    .catch(err => {\n        console.log(err,\"error in data\");\n\n       });\n    }\n\n\n       console.log(store.getState(),\"the store \");\n       console.log(minions,\"minions \");\n};\n\n\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n    // Get token from localstorage\n    const token = store.auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"multipart/form-data\"\n        }\n    }\n\n    // If token, add to headers\n    if(token) {\n       config.headers[\"Authorization\"] = ` Bearer ${token} `;\n    }\n\n return config;\n}\n\n\n\n\n// export const saltReturns =  () => (dispatch, getState) => {\n\n//     const time =new Date().toDateString();\n\n// // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n//     axios.get('http://127.0.0.1:5000/api/saltReturns/apply/2020', tokenConfig(getState))\n//    .then((res) => {\n\n//        // console.log(res,\"res\");\n//    store.dispatch({\n//        type: SALT_RETURNS,\n//        payload: res.data\n//    })})\n//    .catch(err => {\n//        console.log(err,\"error in data\");\n\n//       });\n\n//       console.log(store.getState(),\"the store \");\n// };\n"]},"metadata":{},"sourceType":"module"}