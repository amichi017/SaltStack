{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport { tokenConfig } from './authActions';\nimport { DATE_SELECT, SALT_RETURNS } from './types'; // Date is select\n\nexport const dateSelect = (start, end) => {\n  return {\n    type: DATE_SELECT,\n    payload: {\n      start,\n      end\n    }\n  }; // console.log(\"start \",start);\n  // console.log(\"end \",end);\n}; //  // Clear date\n//   export const saltReturns =  () => (dispatch, getState) => {\n//     const time =new Date().toDateString();\n//     let Month= String(parseInt(store.getState().date.start.getMonth()));\n//     Month=parseInt(Month)<10?\"0\"+Month:Month;\n//     let year=String(store.getState().date.start.getFullYear());\n//     let startYear=new Date(year,Month,store.getState().date.start.getDate());\n//     let endYear=store.getState().date.end;\n//     console.log(startYear,\"startYear\");\n//     console.log(endYear,\"endYear\");\n//  if(store.getState().auth.token !== null){   }  // console.log(\"ppppppppppppppppp\");}\n//    let data=[];\n// //  for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n//     let index = startYear\n//     let url='http://127.0.0.1:5000/api/saltReturns/apply/'+index.getFullYear();\n//     console.log(\"url\" ,url);\n//     axios.get(url, tokenConfig(getState))\n//     .then((res) => {\n//         console.log(\"res.data\" ,res.data);\n//         store.dispatch({\n//             type: SALT_RETURNS,\n//             payload: res.data\n//         })\n//     })\n//     .catch(err => {\n//         console.log(err,\"error in data\");\n//        });\n//  //}\n// console.log(store.getState(),\"the store from date \");\n// };\n//Clear date\n\nexport const saltReturns = () => dispatch => {\n  const time = new Date().toDateString();\n  let Month = String(parseInt(store.getState().date.start.getMonth()));\n  Month = parseInt(Month) < 10 ? \"0\" + Month : Month;\n  let year = String(store.getState().date.start.getFullYear());\n  let startYear = new Date(year, Month, store.getState().date.start.getDate());\n  let endYear = store.getState().date.end;\n  let index = startYear; // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n\n  let minions = [];\n\n  for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n    let url = 'http://127.0.0.1:5000/api/saltReturns/apply/' + index.getFullYear();\n    console.log(\"url\", url);\n    axios.get(url, tokenConfig(getState)).then(res => {\n      minions = minions.concat(res.data); /// if(index === endYear){console.log(res,\"res \");}\n\n      store.dispatch({\n        type: SALT_RETURNS,\n        payload: minions\n      }); // console.log(res,\"res\");\n    }).catch(err => {\n      console.log(err, \"error in data\");\n    });\n  }\n\n  console.log(store.getState(), \"the store \");\n  console.log(minions, \"minions \");\n}; // export const saltReturns =  () => (dispatch, getState) => {\n//     const time =new Date().toDateString();\n// // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n//     axios.get('http://127.0.0.1:5000/api/saltReturns/apply/2020', tokenConfig(getState))\n//    .then((res) => {\n//        // console.log(res,\"res\");\n//    store.dispatch({\n//        type: SALT_RETURNS,\n//        payload: res.data\n//    })})\n//    .catch(err => {\n//        console.log(err,\"error in data\");\n//       });\n//       console.log(store.getState(),\"the store \");\n// };","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/actions/date.js"],"names":["axios","store","tokenConfig","DATE_SELECT","SALT_RETURNS","dateSelect","start","end","type","payload","saltReturns","dispatch","time","Date","toDateString","Month","String","parseInt","getState","date","getMonth","year","getFullYear","startYear","getDate","endYear","index","minions","setFullYear","url","console","log","get","then","res","concat","data","catch","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAAyC,SAAzC,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAASC,GAAT,KAAiB;AAEvC,SAAO;AACHC,IAAAA,IAAI,EAAEL,WADH;AAEHM,IAAAA,OAAO,EAAC;AAACH,MAAAA,KAAD;AAAOC,MAAAA;AAAP;AAFL,GAAP,CAFuC,CAMvC;AACA;AAEH,CATM,C,CAWP;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AACA,OAAO,MAAMG,WAAW,GAAI,MAAOC,QAAD,IAAc;AAC5C,QAAMC,IAAI,GAAE,IAAIC,IAAJ,GAAWC,YAAX,EAAZ;AACA,MAAIC,KAAK,GAAEC,MAAM,CAACC,QAAQ,CAAChB,KAAK,CAACiB,QAAN,GAAiBC,IAAjB,CAAsBb,KAAtB,CAA4Bc,QAA5B,EAAD,CAAT,CAAjB;AACAL,EAAAA,KAAK,GAACE,QAAQ,CAACF,KAAD,CAAR,GAAgB,EAAhB,GAAmB,MAAIA,KAAvB,GAA6BA,KAAnC;AACA,MAAIM,IAAI,GAACL,MAAM,CAACf,KAAK,CAACiB,QAAN,GAAiBC,IAAjB,CAAsBb,KAAtB,CAA4BgB,WAA5B,EAAD,CAAf;AAGA,MAAIC,SAAS,GAAC,IAAIV,IAAJ,CAASQ,IAAT,EAAcN,KAAd,EAAoBd,KAAK,CAACiB,QAAN,GAAiBC,IAAjB,CAAsBb,KAAtB,CAA4BkB,OAA5B,EAApB,CAAd;AACA,MAAIC,OAAO,GAACxB,KAAK,CAACiB,QAAN,GAAiBC,IAAjB,CAAsBZ,GAAlC;AACA,MAAImB,KAAK,GAAGH,SAAZ,CAT4C,CAU5C;;AACA,MAAII,OAAO,GAAC,EAAZ;;AACA,OAAK,IAAID,KAAK,GAAGH,SAAjB,EAA4BG,KAAK,IAAID,OAArC,EAA8CC,KAAK,CAACE,WAAN,CAAkBF,KAAK,CAACJ,WAAN,KAAsB,CAAxC,CAA9C,EAA0F;AAEtF,QAAIO,GAAG,GAAC,iDAA+CH,KAAK,CAACJ,WAAN,EAAvD;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA7B,IAAAA,KAAK,CAACgC,GAAN,CAAUH,GAAV,EAAe3B,WAAW,CAACgB,QAAD,CAA1B,EACKe,IADL,CACWC,GAAD,IAAS;AAEXP,MAAAA,OAAO,GAACA,OAAO,CAACQ,MAAR,CAAeD,GAAG,CAACE,IAAnB,CAAR,CAFW,CAGX;;AACAnC,MAAAA,KAAK,CAACU,QAAN,CAAe;AACXH,QAAAA,IAAI,EAAEJ,YADK;AAEXK,QAAAA,OAAO,EAAEkB;AAFE,OAAf,EAJW,CAQX;AACH,KAVL,EAWKU,KAXL,CAWWC,GAAG,IAAI;AACVR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ,EAAgB,eAAhB;AAEH,KAdL;AAeH;;AAGDR,EAAAA,OAAO,CAACC,GAAR,CAAY9B,KAAK,CAACiB,QAAN,EAAZ,EAA6B,YAA7B;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAAoB,UAApB;AACH,CApCM,C,CA4CP;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA","sourcesContent":["import axios from 'axios';\nimport store from '../store'\nimport { tokenConfig } from './authActions';\nimport { DATE_SELECT, SALT_RETURNS} from './types';\n\n// Date is select\nexport const dateSelect = (start , end) => {\n\n    return {\n        type: DATE_SELECT,\n        payload:{start,end}\n    };\n    // console.log(\"start \",start);\n    // console.log(\"end \",end);\n\n}\n\n//  // Clear date\n//   export const saltReturns =  () => (dispatch, getState) => {\n\n//     const time =new Date().toDateString();\n//     let Month= String(parseInt(store.getState().date.start.getMonth()));\n//     Month=parseInt(Month)<10?\"0\"+Month:Month;\n//     let year=String(store.getState().date.start.getFullYear());\n\n\n//     let startYear=new Date(year,Month,store.getState().date.start.getDate());\n//     let endYear=store.getState().date.end;\n\n//     console.log(startYear,\"startYear\");\n//     console.log(endYear,\"endYear\");\n\n\n//  if(store.getState().auth.token !== null){   }  // console.log(\"ppppppppppppppppp\");}\n\n//    let data=[];\n\n// //  for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n//     let index = startYear\n//     let url='http://127.0.0.1:5000/api/saltReturns/apply/'+index.getFullYear();\n//     console.log(\"url\" ,url);\n//     axios.get(url, tokenConfig(getState))\n//     .then((res) => {\n//         console.log(\"res.data\" ,res.data);\n//         store.dispatch({\n//             type: SALT_RETURNS,\n//             payload: res.data\n//         })\n\n//     })\n//     .catch(err => {\n//         console.log(err,\"error in data\");\n\n//        });\n//  //}\n\n// console.log(store.getState(),\"the store from date \");\n// };\n//Clear date\nexport const saltReturns =  () => (dispatch) => {\n    const time =new Date().toDateString();\n    let Month= String(parseInt(store.getState().date.start.getMonth()));\n    Month=parseInt(Month)<10?\"0\"+Month:Month;\n    let year=String(store.getState().date.start.getFullYear());\n\n\n    let startYear=new Date(year,Month,store.getState().date.start.getDate());\n    let endYear=store.getState().date.end;\n    let index = startYear;\n    // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n    let minions=[];\n    for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n\n        let url='http://127.0.0.1:5000/api/saltReturns/apply/'+index.getFullYear();\n        console.log(\"url\" ,url);\n        axios.get(url, tokenConfig(getState))\n            .then((res) => {\n\n                minions=minions.concat(res.data);\n                /// if(index === endYear){console.log(res,\"res \");}\n                store.dispatch({\n                    type: SALT_RETURNS,\n                    payload: minions\n                })\n                // console.log(res,\"res\");\n            })\n            .catch(err => {\n                console.log(err,\"error in data\");\n\n            });\n    }\n\n\n    console.log(store.getState(),\"the store \");\n    console.log(minions,\"minions \");\n};\n\n\n\n\n\n\n\n// export const saltReturns =  () => (dispatch, getState) => {\n\n//     const time =new Date().toDateString();\n\n// // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n//     axios.get('http://127.0.0.1:5000/api/saltReturns/apply/2020', tokenConfig(getState))\n//    .then((res) => {\n\n//        // console.log(res,\"res\");\n//    store.dispatch({\n//        type: SALT_RETURNS,\n//        payload: res.data\n//    })})\n//    .catch(err => {\n//        console.log(err,\"error in data\");\n\n//       });\n\n//       console.log(store.getState(),\"the store \");\n// };\n"]},"metadata":{},"sourceType":"module"}