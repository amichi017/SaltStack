{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADING, USER_LOADED } from './types';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Router, CallMissedOutgoingOutlined } from '@material-ui/icons'; // Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  console.log(tokenConfig(getState)); // User loading\n\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('http://127.0.0.1:5000/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const register = ({\n  first_name,\n  last_name,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password\n  });\n  axios.post('\"http://127.0.0.1:5000/register\"', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('http://127.0.0.1:5000/auth', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Logout User\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = \"Bearer\" + token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/actions/authActions.js"],"names":["axios","returnErrors","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADING","USER_LOADED","BrowserRouter","Router","CallMissedOutgoingOutlined","loadUser","dispatch","getState","console","log","tokenConfig","type","get","then","res","payload","data","catch","err","response","status","register","first_name","last_name","email","password","config","headers","body","JSON","stringify","post","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\n\nimport {\nAUTH_ERROR,\nLOGIN_SUCCESS,\nLOGIN_FAIL,\nLOGOUT_SUCCESS,\nREGISTER_SUCCESS,\nREGISTER_FAIL,\nUSER_LOADING,\nUSER_LOADED\n} from './types';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Router, CallMissedOutgoingOutlined } from '@material-ui/icons';\n\n\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n    console.log(tokenConfig(getState))\n    // User loading\n    dispatch({ type: USER_LOADING });\n    axios\n      .get('http://127.0.0.1:5000/auth/user', tokenConfig(getState))\n      .then(res =>\n        dispatch({\n          type: USER_LOADED,\n          payload: res.data\n        })\n      )\n      .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n        dispatch({\n          type: AUTH_ERROR\n        });\n      });\n  };\n\n\nexport const register = ({ first_name, last_name, email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    // Request body\n    const body = JSON.stringify({first_name, last_name, email, password });\n\n    axios.post('\"http://127.0.0.1:5000/register\"', body, config)\n    .then(res => dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n    }))\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    })\n}\n\nexport const login = ({ email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    // Request body\n    const body = JSON.stringify({ email, password });\n\n    axios.post('http://127.0.0.1:5000/auth', body, config)\n    .then(res => dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n            \n    }))\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    })\n}\n\n// Logout User\nexport const logout = () => {\n    return {\n      type: LOGOUT_SUCCESS\n    };\n  };\n\n  \n// Setup config/headers and token\nexport const tokenConfig = getState => {\n       // Get token from localstorage\n       const token = getState().auth.token;\n\n       // Headers\n       const config = {\n           headers: {\n               \"Content-type\": \"application/json\"\n           }\n       }\n   \n       // If token, add to headers\n       if(token) {\n           config.headers['x-auth-token'] = \"Bearer\" + token;\n       }\n\n    return config;\n}"]},"metadata":{},"sourceType":"module"}