{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_FAIL, REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADING, USER_LOADED } from './types'; // Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('api/auth/user', config).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n};","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/actions/authActions.js"],"names":["axios","returnErrors","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADING","USER_LOADED","loadUser","dispatch","getState","type","get","config","then","res","payload","data","catch","err","response","status","tokenConfig","token","auth","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SACAC,UADA,EAEAC,aAFA,EAGAC,UAHA,EAIAC,WAJA,EAKAC,gBALA,EAMAC,aANA,EAOAC,YAPA,EAQAC,WARA,QASO,SATP,C,CAWA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AAEAR,EAAAA,KAAK,CAACc,GAAN,CAAU,eAAV,EAA2BC,MAA3B,EACKC,IADL,CACWC,GAAG,IAAIN,QAAQ,CAAC;AACnBE,IAAAA,IAAI,EAACJ,WADc;AAEnBS,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFM,GAAD,CAD1B,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAGH,GAVL;AAWH,CAfM,C,CAmBP;;AACA,OAAO,MAAMsB,WAAW,GAAGZ,QAAQ,IAAI;AAChC;AACA,QAAMa,KAAK,GAAGb,QAAQ,GAAGc,IAAX,CAAgBD,KAA9B,CAFgC,CAIhC;;AACA,QAAMV,MAAM,GAAG;AACXY,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CALgC,CAWhC;;AACA,MAAGF,KAAH,EAAU;AACNV,IAAAA,MAAM,CAACY,OAAP,CAAe,cAAf,IAAiCF,KAAjC;AACH;AACP,CAfM","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\n\nimport {\nAUTH_ERROR,\nLOGIN_SUCCESS,\nLOGIN_FAIL,\nLOGOUT_FAIL,\nREGISTER_SUCCESS,\nREGISTER_FAIL,\nUSER_LOADING,\nUSER_LOADED\n} from './types';\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: USER_LOADING});\n\n    axios.get('api/auth/user', config)\n        .then( res => dispatch({\n            type:USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        })\n}\n\n\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n       // Get token from localstorage\n       const token = getState().auth.token;\n\n       // Headers\n       const config = {\n           headers: {\n               \"Content-type\": \"application/json\"\n           }\n       }\n   \n       // If token, add to headers\n       if(token) {\n           config.headers['x-auth-token'] = token;\n       }\n}"]},"metadata":{},"sourceType":"module"}