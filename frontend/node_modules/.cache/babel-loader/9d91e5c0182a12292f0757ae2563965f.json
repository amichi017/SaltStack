{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport { DATE_SELECT, SALT_RETURNS } from './types'; // Date is select\n\nexport const dateSelect = (start, end) => {\n  return {\n    type: DATE_SELECT,\n    payload: {\n      start,\n      end\n    }\n  }; // console.log(\"start \",start);\n  // console.log(\"end \",end);\n}; // Clear date\n\nexport const saltReturns = () => (dispatch, getState) => {\n  let tempRes = [];\n  let start = store.getState().date.start;\n  let end = store.getState().date.end;\n\n  for (let index = start; index <= end; index.setDate(index.getDate() + 1)) {\n    console.log(\"for\");\n    let year = String(index.getFullYear());\n    let month = parseInt(index.getMonth()) < 10 ? \"0\" + String(parseInt(index.getMonth()) + 1) : String(parseInt(index.getMonth()) + 1);\n    let day = parseInt(index.getDate()) < 10 ? \"0\" + index.getDate() : index.getDate();\n    let time = year + month + day;\n    let http = 'http://127.0.0.1:5000/api/saltReturns/apply/' + time;\n    axios.get(http, tokenConfig(getState)).then(res => {\n      tempRes = tempRes.concat(res.data);\n    }).catch(err => {\n      console.log(err, \"error in data\");\n    });\n  }\n\n  console.log(\"tempRes\", tempRes);\n  store.dispatch({\n    type: SALT_RETURNS,\n    payload: tempRes\n  });\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers[\"Authorization\"] = ` Bearer ${token} `;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/react/SaltStack/frontend/src/actions/date.js"],"names":["axios","store","DATE_SELECT","SALT_RETURNS","dateSelect","start","end","type","payload","saltReturns","dispatch","getState","tempRes","date","index","setDate","getDate","console","log","year","String","getFullYear","month","parseInt","getMonth","day","time","http","get","tokenConfig","then","res","concat","data","catch","err","token","auth","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACC,SAASC,WAAT,EAAsBC,YAAtB,QAAyC,SAAzC,C,CACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAASC,GAAT,KAAiB;AAEvC,SAAO;AACKC,IAAAA,IAAI,EAAEL,WADX;AAEKM,IAAAA,OAAO,EAAC;AAACH,MAAAA,KAAD;AAAOC,MAAAA;AAAP;AAFb,GAAP,CAFuC,CAMvC;AACA;AAEH,CATM,C,CAWP;;AACA,OAAO,MAAMG,WAAW,GAAI,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACtD,MAAIC,OAAO,GAAC,EAAZ;AACA,MAAIP,KAAK,GAACJ,KAAK,CAACU,QAAN,GAAiBE,IAAjB,CAAsBR,KAAhC;AACA,MAAIC,GAAG,GAACL,KAAK,CAACU,QAAN,GAAiBE,IAAjB,CAAsBP,GAA9B;;AACA,OAAK,IAAIQ,KAAK,GAAGT,KAAjB,EAAwBS,KAAK,IAAIR,GAAjC,EAAsCQ,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,OAAN,KAAkB,CAAhC,CAAtC,EACA;AACGC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,QAAIC,IAAI,GAAEC,MAAM,CAACN,KAAK,CAACO,WAAN,EAAD,CAAhB;AAEA,QAAIC,KAAK,GAAEC,QAAQ,CAACT,KAAK,CAACU,QAAN,EAAD,CAAR,GAA2B,EAA3B,GAAgC,MAAIJ,MAAM,CAACG,QAAQ,CAACT,KAAK,CAACU,QAAN,EAAD,CAAR,GAA2B,CAA5B,CAA1C,GAAyEJ,MAAM,CAACG,QAAQ,CAACT,KAAK,CAACU,QAAN,EAAD,CAAR,GAA2B,CAA5B,CAA1F;AACA,QAAIC,GAAG,GAAEF,QAAQ,CAACT,KAAK,CAACE,OAAN,EAAD,CAAR,GAA0B,EAA1B,GAA+B,MAAIF,KAAK,CAACE,OAAN,EAAnC,GAAmDF,KAAK,CAACE,OAAN,EAA5D;AACA,QAAIU,IAAI,GAACP,IAAI,GAACG,KAAL,GAAWG,GAApB;AACA,QAAIE,IAAI,GAAC,iDAA+CD,IAAxD;AAEA1B,IAAAA,KAAK,CAAC4B,GAAN,CAAUD,IAAV,EAAgBE,WAAW,CAAClB,QAAD,CAA3B,EACCmB,IADD,CACOC,GAAD,IAAS;AACXnB,MAAAA,OAAO,GAACA,OAAO,CAACoB,MAAR,CAAeD,GAAG,CAACE,IAAnB,CAAR;AACF,KAHF,EAICC,KAJD,CAIOC,GAAG,IAAI;AACVlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ,EAAgB,eAAhB;AACH,KAND;AAQH;;AACDlB,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBN,OAAtB;AACAX,EAAAA,KAAK,CAACS,QAAN,CAAe;AACXH,IAAAA,IAAI,EAAEJ,YADK;AAEXK,IAAAA,OAAO,EAAEI;AAFE,GAAf;AAIH,CA5BO,C,CAgCR;;AACA,OAAO,MAAMiB,WAAW,GAAGlB,QAAQ,IAAI;AACnC;AACA,QAAMyB,KAAK,GAAGzB,QAAQ,GAAG0B,IAAX,CAAgBD,KAA9B,CAFmC,CAInC;;AACA,QAAME,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CALmC,CAWnC;;AACA,MAAGH,KAAH,EAAU;AACPE,IAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAmC,WAAUH,KAAM,GAAnD;AACF;;AAEJ,SAAOE,MAAP;AACA,CAjBM","sourcesContent":["import axios from 'axios';\r\nimport store from '../store'\r\n import { DATE_SELECT, SALT_RETURNS} from './types';\r\n // Date is select\r\n export const dateSelect = (start , end) => {\r\n   \r\n     return {\r\n                 type: DATE_SELECT,\r\n                 payload:{start,end}\r\n              };\r\n     // console.log(\"start \",start);\r\n     // console.log(\"end \",end);\r\n     \r\n }\r\n \r\n // Clear date\r\n export const saltReturns =  () => (dispatch, getState) => {\r\n     let tempRes=[];\r\n     let start=store.getState().date.start;\r\n     let end=store.getState().date.end;\r\n     for (let index = start; index <= end; index.setDate(index.getDate() + 1)) \r\n     {\r\n        console.log(\"for\");\r\n        let year =String(index.getFullYear());\r\n       \r\n        let month =parseInt(index.getMonth())<10 ? \"0\"+String(parseInt(index.getMonth())+1):String(parseInt(index.getMonth())+1);\r\n        let day =parseInt(index.getDate())<10 ? \"0\"+index.getDate():index.getDate();\r\n        let time=year+month+day;\r\n        let http='http://127.0.0.1:5000/api/saltReturns/apply/'+time;\r\n      \r\n        axios.get(http, tokenConfig(getState))\r\n        .then((res) => {\r\n            tempRes=tempRes.concat(res.data);\r\n         })\r\n        .catch(err => {\r\n            console.log(err,\"error in data\");\r\n        });\r\n      \r\n    }\r\n    console.log(\"tempRes\",tempRes);\r\n    store.dispatch({\r\n        type: SALT_RETURNS,\r\n        payload: tempRes\r\n    });\r\n};\r\n\r\n\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n    // Get token from localstorage\r\n    const token = getState().auth.token;\r\n  \r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    // If token, add to headers\r\n    if(token) {\r\n       config.headers[\"Authorization\"] = ` Bearer ${token} `;\r\n    }\r\n\r\n return config;\r\n}"]},"metadata":{},"sourceType":"module"}