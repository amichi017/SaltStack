{"ast":null,"code":"import _objectWithoutProperties from \"/home/avraham/SaltStack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/avraham/SaltStack/frontend/src/example.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useHistory, useLocation } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\"; // This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\n\nexport default function AuthExample() {\n  return React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(AuthButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/public\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Public Page\")), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/protected\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Protected Page\"))), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/public\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(PublicPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), React.createElement(Route, {\n    path: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(LoginPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })), React.createElement(PrivateRoute, {\n    path: \"/protected\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(ProtectedPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })))));\n}\nconst fakeAuth = {\n  isAuthenticated: false,\n\n  authenticate(cb) {\n    fakeAuth.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n\n  signout(cb) {\n    fakeAuth.isAuthenticated = false;\n    setTimeout(cb, 100);\n  }\n\n};\n\nfunction AuthButton() {\n  let history = useHistory();\n  return fakeAuth.isAuthenticated ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Welcome!\", \" \", React.createElement(\"button\", {\n    onClick: () => {\n      fakeAuth.signout(() => history.push(\"/\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Sign out\")) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"You are not logged in.\");\n} // A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\n\n\nfunction PrivateRoute(_ref) {\n  let children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: ({\n      location\n    }) => fakeAuth.isAuthenticated ? children : React.createElement(Redirect, {\n      to: {\n        pathname: \"/login\",\n        state: {\n          from: location\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }));\n}\n\nfunction PublicPage() {\n  return React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Public\");\n}\n\nfunction ProtectedPage() {\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"//    \", React.createElement(Dashboard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), \"// \"), document.getElementById('root');\n}\n\nfunction LoginPage() {\n  let history = useHistory();\n  let location = useLocation();\n\n  let _ref2 = location.state || {\n    from: {\n      pathname: \"/\"\n    }\n  },\n      from = _ref2.from;\n\n  let login = () => {\n    fakeAuth.authenticate(() => {\n      history.replace(from);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"You must log in to view the page at \", from.pathname), React.createElement(\"button\", {\n    onClick: login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Log in\"));\n}","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/example.js"],"names":["React","BrowserRouter","Router","Switch","Route","Link","Redirect","useHistory","useLocation","Dashboard","AuthExample","fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","AuthButton","history","push","PrivateRoute","children","rest","location","pathname","state","from","PublicPage","ProtectedPage","store","document","getElementById","LoginPage","login","replace"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation\n} from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\n\n// This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\n\nexport default function AuthExample() {\n  return (\n    <Router>\n      <div>\n        <AuthButton />\n\n        <ul>\n          <li>\n            <Link to=\"/public\">Public Page</Link>\n          </li>\n          <li>\n            <Link to=\"/protected\">Protected Page</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/public\">\n            <PublicPage />\n          </Route>\n          <Route path=\"/login\">\n            <LoginPage />\n          </Route>\n          <PrivateRoute path=\"/protected\">\n            <ProtectedPage />\n          </PrivateRoute>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst fakeAuth = {\n  isAuthenticated: false,\n  authenticate(cb) {\n    fakeAuth.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n  signout(cb) {\n    fakeAuth.isAuthenticated = false;\n    setTimeout(cb, 100);\n  }\n};\n\nfunction AuthButton() {\n  let history = useHistory();\n\n  return fakeAuth.isAuthenticated ? (\n    <p>\n      Welcome!{\" \"}\n      <button\n        onClick={() => {\n          fakeAuth.signout(() => history.push(\"/\"));\n        }}\n      >\n        Sign out\n      </button>\n    </p>\n  ) : (\n    <p>You are not logged in.</p>\n  );\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        fakeAuth.isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nfunction PublicPage() {\n  return <h3>Public</h3>;\n}\n\nfunction ProtectedPage() {\n  return ( <Provider store={store}>\n    //    <Dashboard />\n    // </Provider> , document.getElementById('root'));\n}\n\nfunction LoginPage() {\n  let history = useHistory();\n  let location = useLocation();\n\n  let { from } = location.state || { from: { pathname: \"/\" } };\n  let login = () => {\n    fakeAuth.authenticate(() => {\n      history.replace(from);\n    });\n  };\n\n  return (\n    <div>\n      <p>You must log in to view the page at {from.pathname}</p>\n      <button onClick={login}>Log in</button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}