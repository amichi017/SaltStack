{"ast":null,"code":"import _objectWithoutProperties from \"/home/avraham/SaltStack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/avraham/SaltStack/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Dashboard from \"./Dashboard\";\nimport LoginForm from './Component/LoginForm';\nimport RegisterForm from './Component/RegisterForm';\nimport { createStore } from 'redux';\nimport appReducer from './reducers/index';\nimport { Provider } from 'react-redux'; // This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loggedIn: false // user is not logged in\n\n    };\n  }\n\n  render() {\n    return React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(PrivateRoute, {\n      isLoggedIn: this.state.loggedIn,\n      path: \"/protected\",\n      component: Dashboard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/login\",\n      component: LoginForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst PrivateRoute = (_ref) => {\n  let isLoggedIn = _ref.isLoggedIn,\n      props = _objectWithoutProperties(_ref, [\"isLoggedIn\"]);\n\n  return isLoggedIn ? React.createElement(Route, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })) : React.createElement(Redirect, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/App.js"],"names":["React","Component","Route","Switch","Redirect","Dashboard","LoginForm","RegisterForm","createStore","appReducer","Provider","App","state","loggedIn","render","PrivateRoute","isLoggedIn","props"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,QAAR,QAAuB,aAAvB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BW,KAF0B,GAElB;AACNC,MAAAA,QAAQ,EAAE,KADJ,CACU;;AADV,KAFkB;AAAA;;AAM1BC,EAAAA,MAAM,GAAG;AAEP,WACM,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,YAAD;AAAc,MAAA,UAAU,EAAG,KAAKF,KAAL,CAAWC,QAAtC;AAAiD,MAAA,IAAI,EAAC,YAAtD;AAAmE,MAAA,SAAS,EAAER,SAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAEA,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAEC,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,CADN;AAMD;;AAdyB;;AAmB5B,MAAMS,YAAY,GAAG;AAAA,MAAGC,UAAH,QAAGA,UAAH;AAAA,MAAkBC,KAAlB;;AAAA,SACnBD,UAAU,GACN,oBAAC,KAAD,oBAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADM,GAEN,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHe;AAAA,CAArB;;AAKA,eAAeN,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Dashboard from \"./Dashboard\";\nimport LoginForm from './Component/LoginForm';\nimport RegisterForm from './Component/RegisterForm';\nimport { createStore } from 'redux';\nimport appReducer from './reducers/index';\nimport {Provider} from 'react-redux';\n\n\n// This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nclass App extends Component {\n\n  state = {\n    loggedIn: false // user is not logged in\n  };\n\n  render() {\n\n    return (\n          <Switch>\n          <PrivateRoute isLoggedIn={ this.state.loggedIn } path=\"/protected\" component={Dashboard} />\n          <Route path=\"/login\" component={LoginForm}/>\n          </Switch>      \n    );\n  }\n}\n\n\n\nconst PrivateRoute = ({ isLoggedIn, ...props }) =>\n  isLoggedIn\n    ? <Route { ...props } />\n    : <Redirect to=\"/login\" />\n\nexport default App;\n\n\n\n"]},"metadata":{},"sourceType":"module"}