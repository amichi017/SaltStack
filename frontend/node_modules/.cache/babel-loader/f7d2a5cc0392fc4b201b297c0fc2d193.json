{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport { DATE_SELECT, SALT_RETURNS } from './types'; // Date is select\n\nexport const dateSelect = (start, end) => {\n  return {\n    type: DATE_SELECT,\n    payload: {\n      start,\n      end\n    }\n  }; // console.log(\"start \",start);\n  // console.log(\"end \",end);\n}; //  // Clear date\n//   export const saltReturns =  () => (dispatch, getState) => {\n//     const time =new Date().toDateString();\n//     let Month= String(parseInt(store.getState().date.start.getMonth()));\n//     Month=parseInt(Month)<10?\"0\"+Month:Month;\n//     let year=String(store.getState().date.start.getFullYear());\n//     let startYear=new Date(year,Month,store.getState().date.start.getDate());\n//     let endYear=store.getState().date.end;\n//     console.log(startYear,\"startYear\");\n//     console.log(endYear,\"endYear\");\n//  if(store.getState().auth.token !== null){   }  // console.log(\"ppppppppppppppppp\");}\n//    let data=[];\n// //  for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n//     let index = startYear\n//     let url='http://127.0.0.1:5000/api/saltReturns/apply/'+index.getFullYear();\n//     console.log(\"url\" ,url);\n//     axios.get(url, tokenConfig(getState))\n//     .then((res) => { \n//         console.log(\"res.data\" ,res.data);\n//         store.dispatch({\n//             type: SALT_RETURNS,\n//             payload: res.data\n//         })\n//     })\n//     .catch(err => {\n//         console.log(err,\"error in data\");\n//        });\n//  //}\n// console.log(store.getState(),\"the store from date \"); \n// };\n//Clear date\n\nexport const saltReturns = () => (dispatch, getState) => {\n  const time = new Date().toDateString();\n  let Month = String(parseInt(store.getState().date.start.getMonth()));\n  Month = parseInt(Month) < 10 ? \"0\" + Month : Month;\n  let year = String(store.getState().date.start.getFullYear());\n  let startYear = new Date(year, Month, store.getState().date.start.getDate());\n  let endYear = store.getState().date.end;\n  let index = startYear; // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n\n  let minions = [];\n\n  for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\n    let url = 'http://127.0.0.1:5000/api/saltReturns/apply/' + index.getFullYear();\n    console.log(\"url\", url);\n    axios.get(url, tokenConfig(getState)).then(res => {\n      console.log(res, \"res \");\n      minions = minions.concat(res.data);\n      console.log(minions, \"minions from for \"); // console.log(res,\"res\");\n    }).catch(err => {\n      console.log(err, \"error in data\");\n    });\n  }\n\n  store.dispatch({\n    type: SALT_RETURNS,\n    payload: minions\n  });\n  console.log(store.getState(), \"the store \");\n  console.log(minions, \"minions \");\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.access_token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"multipart/form-data\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers[\"Authorization\"] = ` Bearer ${token} `;\n  }\n\n  return config;\n}; // export const saltReturns =  () => (dispatch, getState) => {\n//     const time =new Date().toDateString();\n// // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\n//     axios.get('http://127.0.0.1:5000/api/saltReturns/apply/2020', tokenConfig(getState))\n//    .then((res) => { \n//        // console.log(res,\"res\");\n//    store.dispatch({\n//        type: SALT_RETURNS,\n//        payload: res.data\n//    })})\n//    .catch(err => {\n//        console.log(err,\"error in data\");\n//       });\n//       console.log(store.getState(),\"the store \");\n// };","map":{"version":3,"sources":["C:/react/SaltStack/frontend/src/actions/date.js"],"names":["axios","store","DATE_SELECT","SALT_RETURNS","dateSelect","start","end","type","payload","saltReturns","dispatch","getState","time","Date","toDateString","Month","String","parseInt","date","getMonth","year","getFullYear","startYear","getDate","endYear","index","minions","setFullYear","url","console","log","get","tokenConfig","then","res","concat","data","catch","err","token","auth","access_token","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACC,SAASC,WAAT,EAAsBC,YAAtB,QAAyC,SAAzC,C,CACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAASC,GAAT,KAAiB;AAEvC,SAAO;AACKC,IAAAA,IAAI,EAAEL,WADX;AAEKM,IAAAA,OAAO,EAAC;AAACH,MAAAA,KAAD;AAAOC,MAAAA;AAAP;AAFb,GAAP,CAFuC,CAMvC;AACA;AAEH,CATM,C,CAWR;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACC;;AACA,OAAO,MAAMG,WAAW,GAAI,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAEtD,QAAMC,IAAI,GAAE,IAAIC,IAAJ,GAAWC,YAAX,EAAZ;AACA,MAAIC,KAAK,GAAEC,MAAM,CAACC,QAAQ,CAAChB,KAAK,CAACU,QAAN,GAAiBO,IAAjB,CAAsBb,KAAtB,CAA4Bc,QAA5B,EAAD,CAAT,CAAjB;AACIJ,EAAAA,KAAK,GAACE,QAAQ,CAACF,KAAD,CAAR,GAAgB,EAAhB,GAAmB,MAAIA,KAAvB,GAA6BA,KAAnC;AACA,MAAIK,IAAI,GAACJ,MAAM,CAACf,KAAK,CAACU,QAAN,GAAiBO,IAAjB,CAAsBb,KAAtB,CAA4BgB,WAA5B,EAAD,CAAf;AAGA,MAAIC,SAAS,GAAC,IAAIT,IAAJ,CAASO,IAAT,EAAcL,KAAd,EAAoBd,KAAK,CAACU,QAAN,GAAiBO,IAAjB,CAAsBb,KAAtB,CAA4BkB,OAA5B,EAApB,CAAd;AACA,MAAIC,OAAO,GAACvB,KAAK,CAACU,QAAN,GAAiBO,IAAjB,CAAsBZ,GAAlC;AACA,MAAImB,KAAK,GAAGH,SAAZ,CAVkD,CAW1D;;AACO,MAAII,OAAO,GAAC,EAAZ;;AACP,OAAK,IAAID,KAAK,GAAGH,SAAjB,EAA4BG,KAAK,IAAID,OAArC,EAA8CC,KAAK,CAACE,WAAN,CAAkBF,KAAK,CAACJ,WAAN,KAAsB,CAAxC,CAA9C,EAA0F;AAEtF,QAAIO,GAAG,GAAC,iDAA+CH,KAAK,CAACJ,WAAN,EAAvD;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA5B,IAAAA,KAAK,CAAC+B,GAAN,CAAUH,GAAV,EAAeI,WAAW,CAACrB,QAAD,CAA1B,EACAsB,IADA,CACMC,GAAD,IAAS;AACXL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ,EAAgB,MAAhB;AACAR,MAAAA,OAAO,GAACA,OAAO,CAACS,MAAR,CAAeD,GAAG,CAACE,IAAnB,CAAR;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAAoB,mBAApB,EAHW,CAIX;AACH,KANA,EAOAW,KAPA,CAOMC,GAAG,IAAI;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ,EAAgB,eAAhB;AAEA,KAVH;AAWA;;AAEDrC,EAAAA,KAAK,CAACS,QAAN,CAAe;AACXH,IAAAA,IAAI,EAAEJ,YADK;AAEXK,IAAAA,OAAO,EAAEkB;AAFE,GAAf;AAIGG,EAAAA,OAAO,CAACC,GAAR,CAAY7B,KAAK,CAACU,QAAN,EAAZ,EAA6B,YAA7B;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAAoB,UAApB;AACN,CApCO,C,CAwCR;;AACA,OAAO,MAAMM,WAAW,GAAGrB,QAAQ,IAAI;AACnC;AACA,QAAM4B,KAAK,GAAG5B,QAAQ,GAAG6B,IAAX,CAAgBC,YAA9B,CAFmC,CAInC;;AACA,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CALmC,CAWnC;;AACA,MAAGJ,KAAH,EAAU;AACPG,IAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAmC,WAAUJ,KAAM,GAAnD;AACF;;AAEJ,SAAOG,MAAP;AACA,CAjBM,C,CAsBP;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA","sourcesContent":["import axios from 'axios';\r\nimport store from '../store'\r\n import { DATE_SELECT, SALT_RETURNS} from './types';\r\n // Date is select\r\n export const dateSelect = (start , end) => {\r\n   \r\n     return {\r\n                 type: DATE_SELECT,\r\n                 payload:{start,end}\r\n              };\r\n     // console.log(\"start \",start);\r\n     // console.log(\"end \",end);\r\n     \r\n }\r\n \r\n//  // Clear date\r\n//   export const saltReturns =  () => (dispatch, getState) => {\r\n     \r\n//     const time =new Date().toDateString();\r\n//     let Month= String(parseInt(store.getState().date.start.getMonth()));\r\n//     Month=parseInt(Month)<10?\"0\"+Month:Month;\r\n//     let year=String(store.getState().date.start.getFullYear());\r\n\r\n    \r\n//     let startYear=new Date(year,Month,store.getState().date.start.getDate());\r\n//     let endYear=store.getState().date.end;\r\n    \r\n//     console.log(startYear,\"startYear\");\r\n//     console.log(endYear,\"endYear\");\r\n\r\n\r\n//  if(store.getState().auth.token !== null){   }  // console.log(\"ppppppppppppppppp\");}\r\n\r\n//    let data=[];\r\n\r\n// //  for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\r\n//     let index = startYear\r\n//     let url='http://127.0.0.1:5000/api/saltReturns/apply/'+index.getFullYear();\r\n//     console.log(\"url\" ,url);\r\n//     axios.get(url, tokenConfig(getState))\r\n//     .then((res) => { \r\n//         console.log(\"res.data\" ,res.data);\r\n//         store.dispatch({\r\n//             type: SALT_RETURNS,\r\n//             payload: res.data\r\n//         })\r\n       \r\n//     })\r\n//     .catch(err => {\r\n//         console.log(err,\"error in data\");\r\n       \r\n//        });\r\n//  //}\r\n \r\n// console.log(store.getState(),\"the store from date \"); \r\n// };\r\n //Clear date\r\n export const saltReturns =  () => (dispatch, getState) => {\r\n     \r\n     const time =new Date().toDateString();\r\n     let Month= String(parseInt(store.getState().date.start.getMonth()));\r\n         Month=parseInt(Month)<10?\"0\"+Month:Month;\r\n         let year=String(store.getState().date.start.getFullYear());\r\n     \r\n         \r\n         let startYear=new Date(year,Month,store.getState().date.start.getDate());\r\n         let endYear=store.getState().date.end;\r\n         let index = startYear;\r\n // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\r\n        let minions=[];\r\n for (let index = startYear; index <= endYear; index.setFullYear(index.getFullYear() + 1)) {\r\n \r\n     let url='http://127.0.0.1:5000/api/saltReturns/apply/'+index.getFullYear();\r\n     console.log(\"url\" ,url);\r\n     axios.get(url, tokenConfig(getState))\r\n    .then((res) => { \r\n        console.log(res,\"res \");\r\n        minions=minions.concat(res.data);\r\n        console.log(minions,\"minions from for \");\r\n        // console.log(res,\"res\");\r\n    })\r\n    .catch(err => {\r\n        console.log(err,\"error in data\");\r\n       \r\n       });\r\n    }\r\n    \r\n    store.dispatch({\r\n        type: SALT_RETURNS,\r\n        payload: minions\r\n    })\r\n       console.log(store.getState(),\"the store \");\r\n       console.log(minions,\"minions \");\r\n};\r\n\r\n\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n    // Get token from localstorage\r\n    const token = getState().auth.access_token;\r\n  \r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"multipart/form-data\"\r\n        }\r\n    }\r\n\r\n    // If token, add to headers\r\n    if(token) {\r\n       config.headers[\"Authorization\"] = ` Bearer ${token} `;\r\n    }\r\n\r\n return config;\r\n}\r\n\r\n\r\n\r\n\r\n// export const saltReturns =  () => (dispatch, getState) => {\r\n     \r\n//     const time =new Date().toDateString();\r\n\r\n// // if(getState().auth.token !== null){      console.log(\"ppppppppppppppppp\");}\r\n//     axios.get('http://127.0.0.1:5000/api/saltReturns/apply/2020', tokenConfig(getState))\r\n//    .then((res) => { \r\n       \r\n//        // console.log(res,\"res\");\r\n//    store.dispatch({\r\n//        type: SALT_RETURNS,\r\n//        payload: res.data\r\n//    })})\r\n//    .catch(err => {\r\n//        console.log(err,\"error in data\");\r\n      \r\n//       });\r\n\r\n//       console.log(store.getState(),\"the store \");\r\n// };"]},"metadata":{},"sourceType":"module"}