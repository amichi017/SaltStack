{"ast":null,"code":"import _objectWithoutProperties from \"/home/avraham/SaltStack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/avraham/SaltStack/frontend/src/App.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useHistory, useLocation } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport LoginForm from './Component/LoginForm';\nimport RegisterForm from './Component/RegisterForm';\nimport { createStore } from 'redux';\nimport appReducer from './reducers/index';\nimport { Provider } from 'react-redux'; // This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\n\nexport default function AuthExample() {\n  return React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(AuthButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/login\",\n    component: LoginForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/register\",\n    component: RegisterForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(PrivateRoute, {\n    isAuthenticated: this.state.authed,\n    path: \"/\",\n    component: Dashboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }))));\n}\nconst fakeAuth = {\n  isAuthenticated: false,\n\n  authenticate(cb) {\n    fakeAuth.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n\n  signout(cb) {\n    fakeAuth.isAuthenticated = false;\n    setTimeout(cb, 100);\n  }\n\n};\n\nfunction AuthButton() {\n  let history = useHistory();\n  return fakeAuth.isAuthenticated ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Welcome!\", \" \", React.createElement(\"button\", {\n    onClick: () => {\n      fakeAuth.signout(() => history.push(\"/\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Sign out\")) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"You are not logged in.\");\n} // A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\n\n\nfunction PrivateRoute(_ref) {\n  let children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: props => auth === true ? React.createElement(LoginForm, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })) : React.createElement(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: props.location\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n}\n\nfunction PublicPage() {\n  return React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Public\");\n}\n\nfunction ProtectedPage() {\n  const store = createStore(appReducer);\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Dashboard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n}\n\nfunction LoginPage() {\n  let history = useHistory();\n  let location = useLocation();\n  const store = createStore(appReducer);\n\n  let _ref2 = location.state || {\n    from: {\n      pathname: \"/\"\n    }\n  },\n      from = _ref2.from;\n\n  let login = () => {\n    fakeAuth.authenticate(() => {\n      history.replace(from);\n    });\n  };\n\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(LoginForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/avraham/SaltStack/frontend/src/App.js"],"names":["React","BrowserRouter","Router","Switch","Route","Link","Redirect","useHistory","useLocation","Dashboard","LoginForm","RegisterForm","createStore","appReducer","Provider","AuthExample","state","authed","fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","AuthButton","history","push","PrivateRoute","children","rest","props","auth","pathname","from","location","PublicPage","ProtectedPage","store","LoginPage","login","replace"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation\n} from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport LoginForm from './Component/LoginForm';\nimport RegisterForm from './Component/RegisterForm';\nimport { createStore } from 'redux';\nimport appReducer from './reducers/index';\nimport {Provider} from 'react-redux';\n\n\n// This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\n\nexport default function AuthExample() {\n  \n  return (\n    <Router>\n      <div>\n        <AuthButton />\n\n        <Switch>\n        <Route path='/login' component={LoginForm} />\n        <Route path='/register' component={RegisterForm} />\n        <PrivateRoute isAuthenticated={this.state.authed} path='/' component={Dashboard} />   \n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst fakeAuth = {\n  isAuthenticated: false,\n  authenticate(cb) {\n    fakeAuth.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n  signout(cb) {\n    fakeAuth.isAuthenticated = false;\n    setTimeout(cb, 100);\n  }\n};\n\nfunction AuthButton() {\n  let history = useHistory();\n\n  return fakeAuth.isAuthenticated ? (\n    <p>\n      Welcome!{\" \"}\n      <button\n        onClick={() => {\n          fakeAuth.signout(() => history.push(\"/\"));\n        }}\n      >\n        Sign out\n      </button>\n    </p>\n  ) : (\n    <p>You are not logged in.</p>\n  );\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => auth === true\n        ? <LoginForm {...props} />\n        : <Redirect to={{pathname: '/login', state: {from: props.location}}} />}\n    />\n  )\n}\n\nfunction PublicPage() {\n  return <h3>Public</h3>;\n}\n\nfunction ProtectedPage() {\n  const store = createStore(appReducer);\n\n  return ( <Provider store={store}>\n           <Dashboard />\n           </Provider> );\n}\n\nfunction LoginPage() {\n  let history = useHistory();\n  let location = useLocation();\n  const store = createStore(appReducer);\n\n  let { from } = location.state || { from: { pathname: \"/\" } };\n  let login = () => {\n    fakeAuth.authenticate(() => {\n      history.replace(from);\n    });\n  };\n\n  return (\n    <Provider store={store}>\n    <LoginForm />\n    </Provider>  \n  );\n}\n"]},"metadata":{},"sourceType":"module"}